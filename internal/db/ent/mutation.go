// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/article"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/phaseoptions"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/predicate"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle      = "Article"
	TypePhaseOptions = "PhaseOptions"
	TypeUserOptions  = "UserOptions"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	video_url           *string
	video_id            *string
	uploader            *string
	uploader_url        *string
	description         *string
	title               *string
	thumbnail           *string
	html                *string
	clearedFields       map[string]struct{}
	user_options        *int
	cleareduser_options bool
	done                bool
	oldValue            func(context.Context) (*Article, error)
	predicates          []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id int) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVideoURL sets the "video_url" field.
func (m *ArticleMutation) SetVideoURL(s string) {
	m.video_url = &s
}

// VideoURL returns the value of the "video_url" field in the mutation.
func (m *ArticleMutation) VideoURL() (r string, exists bool) {
	v := m.video_url
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoURL returns the old "video_url" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldVideoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoURL: %w", err)
	}
	return oldValue.VideoURL, nil
}

// ResetVideoURL resets all changes to the "video_url" field.
func (m *ArticleMutation) ResetVideoURL() {
	m.video_url = nil
}

// SetVideoID sets the "video_id" field.
func (m *ArticleMutation) SetVideoID(s string) {
	m.video_id = &s
}

// VideoID returns the value of the "video_id" field in the mutation.
func (m *ArticleMutation) VideoID() (r string, exists bool) {
	v := m.video_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoID returns the old "video_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldVideoID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoID: %w", err)
	}
	return oldValue.VideoID, nil
}

// ResetVideoID resets all changes to the "video_id" field.
func (m *ArticleMutation) ResetVideoID() {
	m.video_id = nil
}

// SetUploader sets the "uploader" field.
func (m *ArticleMutation) SetUploader(s string) {
	m.uploader = &s
}

// Uploader returns the value of the "uploader" field in the mutation.
func (m *ArticleMutation) Uploader() (r string, exists bool) {
	v := m.uploader
	if v == nil {
		return
	}
	return *v, true
}

// OldUploader returns the old "uploader" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldUploader(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploader: %w", err)
	}
	return oldValue.Uploader, nil
}

// ResetUploader resets all changes to the "uploader" field.
func (m *ArticleMutation) ResetUploader() {
	m.uploader = nil
}

// SetUploaderURL sets the "uploader_url" field.
func (m *ArticleMutation) SetUploaderURL(s string) {
	m.uploader_url = &s
}

// UploaderURL returns the value of the "uploader_url" field in the mutation.
func (m *ArticleMutation) UploaderURL() (r string, exists bool) {
	v := m.uploader_url
	if v == nil {
		return
	}
	return *v, true
}

// OldUploaderURL returns the old "uploader_url" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldUploaderURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUploaderURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUploaderURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUploaderURL: %w", err)
	}
	return oldValue.UploaderURL, nil
}

// ResetUploaderURL resets all changes to the "uploader_url" field.
func (m *ArticleMutation) ResetUploaderURL() {
	m.uploader_url = nil
}

// SetDescription sets the "description" field.
func (m *ArticleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ArticleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ArticleMutation) ResetDescription() {
	m.description = nil
}

// SetTitle sets the "title" field.
func (m *ArticleMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ArticleMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *ArticleMutation) ResetTitle() {
	m.title = nil
}

// SetThumbnail sets the "thumbnail" field.
func (m *ArticleMutation) SetThumbnail(s string) {
	m.thumbnail = &s
}

// Thumbnail returns the value of the "thumbnail" field in the mutation.
func (m *ArticleMutation) Thumbnail() (r string, exists bool) {
	v := m.thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnail returns the old "thumbnail" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldThumbnail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnail: %w", err)
	}
	return oldValue.Thumbnail, nil
}

// ResetThumbnail resets all changes to the "thumbnail" field.
func (m *ArticleMutation) ResetThumbnail() {
	m.thumbnail = nil
}

// SetHTML sets the "html" field.
func (m *ArticleMutation) SetHTML(s string) {
	m.html = &s
}

// HTML returns the value of the "html" field in the mutation.
func (m *ArticleMutation) HTML() (r string, exists bool) {
	v := m.html
	if v == nil {
		return
	}
	return *v, true
}

// OldHTML returns the old "html" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldHTML(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHTML is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHTML requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHTML: %w", err)
	}
	return oldValue.HTML, nil
}

// ResetHTML resets all changes to the "html" field.
func (m *ArticleMutation) ResetHTML() {
	m.html = nil
}

// SetUserOptionsID sets the "user_options" edge to the UserOptions entity by id.
func (m *ArticleMutation) SetUserOptionsID(id int) {
	m.user_options = &id
}

// ClearUserOptions clears the "user_options" edge to the UserOptions entity.
func (m *ArticleMutation) ClearUserOptions() {
	m.cleareduser_options = true
}

// UserOptionsCleared reports if the "user_options" edge to the UserOptions entity was cleared.
func (m *ArticleMutation) UserOptionsCleared() bool {
	return m.cleareduser_options
}

// UserOptionsID returns the "user_options" edge ID in the mutation.
func (m *ArticleMutation) UserOptionsID() (id int, exists bool) {
	if m.user_options != nil {
		return *m.user_options, true
	}
	return
}

// UserOptionsIDs returns the "user_options" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserOptionsID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) UserOptionsIDs() (ids []int) {
	if id := m.user_options; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserOptions resets all changes to the "user_options" edge.
func (m *ArticleMutation) ResetUserOptions() {
	m.user_options = nil
	m.cleareduser_options = false
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArticleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArticleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Article, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArticleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.video_url != nil {
		fields = append(fields, article.FieldVideoURL)
	}
	if m.video_id != nil {
		fields = append(fields, article.FieldVideoID)
	}
	if m.uploader != nil {
		fields = append(fields, article.FieldUploader)
	}
	if m.uploader_url != nil {
		fields = append(fields, article.FieldUploaderURL)
	}
	if m.description != nil {
		fields = append(fields, article.FieldDescription)
	}
	if m.title != nil {
		fields = append(fields, article.FieldTitle)
	}
	if m.thumbnail != nil {
		fields = append(fields, article.FieldThumbnail)
	}
	if m.html != nil {
		fields = append(fields, article.FieldHTML)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldVideoURL:
		return m.VideoURL()
	case article.FieldVideoID:
		return m.VideoID()
	case article.FieldUploader:
		return m.Uploader()
	case article.FieldUploaderURL:
		return m.UploaderURL()
	case article.FieldDescription:
		return m.Description()
	case article.FieldTitle:
		return m.Title()
	case article.FieldThumbnail:
		return m.Thumbnail()
	case article.FieldHTML:
		return m.HTML()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldVideoURL:
		return m.OldVideoURL(ctx)
	case article.FieldVideoID:
		return m.OldVideoID(ctx)
	case article.FieldUploader:
		return m.OldUploader(ctx)
	case article.FieldUploaderURL:
		return m.OldUploaderURL(ctx)
	case article.FieldDescription:
		return m.OldDescription(ctx)
	case article.FieldTitle:
		return m.OldTitle(ctx)
	case article.FieldThumbnail:
		return m.OldThumbnail(ctx)
	case article.FieldHTML:
		return m.OldHTML(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldVideoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoURL(v)
		return nil
	case article.FieldVideoID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoID(v)
		return nil
	case article.FieldUploader:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploader(v)
		return nil
	case article.FieldUploaderURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUploaderURL(v)
		return nil
	case article.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case article.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case article.FieldThumbnail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnail(v)
		return nil
	case article.FieldHTML:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHTML(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldVideoURL:
		m.ResetVideoURL()
		return nil
	case article.FieldVideoID:
		m.ResetVideoID()
		return nil
	case article.FieldUploader:
		m.ResetUploader()
		return nil
	case article.FieldUploaderURL:
		m.ResetUploaderURL()
		return nil
	case article.FieldDescription:
		m.ResetDescription()
		return nil
	case article.FieldTitle:
		m.ResetTitle()
		return nil
	case article.FieldThumbnail:
		m.ResetThumbnail()
		return nil
	case article.FieldHTML:
		m.ResetHTML()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_options != nil {
		edges = append(edges, article.EdgeUserOptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case article.EdgeUserOptions:
		if id := m.user_options; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_options {
		edges = append(edges, article.EdgeUserOptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case article.EdgeUserOptions:
		return m.cleareduser_options
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	switch name {
	case article.EdgeUserOptions:
		m.ClearUserOptions()
		return nil
	}
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	switch name {
	case article.EdgeUserOptions:
		m.ResetUserOptions()
		return nil
	}
	return fmt.Errorf("unknown Article edge %s", name)
}

// PhaseOptionsMutation represents an operation that mutates the PhaseOptions nodes in the graph.
type PhaseOptionsMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	phase_name          *string
	client              *string
	model               *string
	prompt              *string
	clearedFields       map[string]struct{}
	user_options        *int
	cleareduser_options bool
	done                bool
	oldValue            func(context.Context) (*PhaseOptions, error)
	predicates          []predicate.PhaseOptions
}

var _ ent.Mutation = (*PhaseOptionsMutation)(nil)

// phaseoptionsOption allows management of the mutation configuration using functional options.
type phaseoptionsOption func(*PhaseOptionsMutation)

// newPhaseOptionsMutation creates new mutation for the PhaseOptions entity.
func newPhaseOptionsMutation(c config, op Op, opts ...phaseoptionsOption) *PhaseOptionsMutation {
	m := &PhaseOptionsMutation{
		config:        c,
		op:            op,
		typ:           TypePhaseOptions,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhaseOptionsID sets the ID field of the mutation.
func withPhaseOptionsID(id int) phaseoptionsOption {
	return func(m *PhaseOptionsMutation) {
		var (
			err   error
			once  sync.Once
			value *PhaseOptions
		)
		m.oldValue = func(ctx context.Context) (*PhaseOptions, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PhaseOptions.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhaseOptions sets the old PhaseOptions of the mutation.
func withPhaseOptions(node *PhaseOptions) phaseoptionsOption {
	return func(m *PhaseOptionsMutation) {
		m.oldValue = func(context.Context) (*PhaseOptions, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhaseOptionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhaseOptionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PhaseOptionsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PhaseOptionsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PhaseOptions.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPhaseName sets the "phase_name" field.
func (m *PhaseOptionsMutation) SetPhaseName(s string) {
	m.phase_name = &s
}

// PhaseName returns the value of the "phase_name" field in the mutation.
func (m *PhaseOptionsMutation) PhaseName() (r string, exists bool) {
	v := m.phase_name
	if v == nil {
		return
	}
	return *v, true
}

// OldPhaseName returns the old "phase_name" field's value of the PhaseOptions entity.
// If the PhaseOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhaseOptionsMutation) OldPhaseName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhaseName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhaseName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhaseName: %w", err)
	}
	return oldValue.PhaseName, nil
}

// ResetPhaseName resets all changes to the "phase_name" field.
func (m *PhaseOptionsMutation) ResetPhaseName() {
	m.phase_name = nil
}

// SetClient sets the "client" field.
func (m *PhaseOptionsMutation) SetClient(s string) {
	m.client = &s
}

// GetClient returns the value of the "client" field in the mutation.
func (m *PhaseOptionsMutation) GetClient() (r string, exists bool) {
	v := m.client
	if v == nil {
		return
	}
	return *v, true
}

// OldClient returns the old "client" field's value of the PhaseOptions entity.
// If the PhaseOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhaseOptionsMutation) OldClient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClient: %w", err)
	}
	return oldValue.Client, nil
}

// ClearClient clears the value of the "client" field.
func (m *PhaseOptionsMutation) ClearClient() {
	m.client = nil
	m.clearedFields[phaseoptions.FieldClient] = struct{}{}
}

// ClientCleared returns if the "client" field was cleared in this mutation.
func (m *PhaseOptionsMutation) ClientCleared() bool {
	_, ok := m.clearedFields[phaseoptions.FieldClient]
	return ok
}

// ResetClient resets all changes to the "client" field.
func (m *PhaseOptionsMutation) ResetClient() {
	m.client = nil
	delete(m.clearedFields, phaseoptions.FieldClient)
}

// SetModel sets the "model" field.
func (m *PhaseOptionsMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *PhaseOptionsMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the PhaseOptions entity.
// If the PhaseOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhaseOptionsMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ClearModel clears the value of the "model" field.
func (m *PhaseOptionsMutation) ClearModel() {
	m.model = nil
	m.clearedFields[phaseoptions.FieldModel] = struct{}{}
}

// ModelCleared returns if the "model" field was cleared in this mutation.
func (m *PhaseOptionsMutation) ModelCleared() bool {
	_, ok := m.clearedFields[phaseoptions.FieldModel]
	return ok
}

// ResetModel resets all changes to the "model" field.
func (m *PhaseOptionsMutation) ResetModel() {
	m.model = nil
	delete(m.clearedFields, phaseoptions.FieldModel)
}

// SetPrompt sets the "prompt" field.
func (m *PhaseOptionsMutation) SetPrompt(s string) {
	m.prompt = &s
}

// Prompt returns the value of the "prompt" field in the mutation.
func (m *PhaseOptionsMutation) Prompt() (r string, exists bool) {
	v := m.prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldPrompt returns the old "prompt" field's value of the PhaseOptions entity.
// If the PhaseOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhaseOptionsMutation) OldPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrompt: %w", err)
	}
	return oldValue.Prompt, nil
}

// ClearPrompt clears the value of the "prompt" field.
func (m *PhaseOptionsMutation) ClearPrompt() {
	m.prompt = nil
	m.clearedFields[phaseoptions.FieldPrompt] = struct{}{}
}

// PromptCleared returns if the "prompt" field was cleared in this mutation.
func (m *PhaseOptionsMutation) PromptCleared() bool {
	_, ok := m.clearedFields[phaseoptions.FieldPrompt]
	return ok
}

// ResetPrompt resets all changes to the "prompt" field.
func (m *PhaseOptionsMutation) ResetPrompt() {
	m.prompt = nil
	delete(m.clearedFields, phaseoptions.FieldPrompt)
}

// SetUserOptionsID sets the "user_options" edge to the UserOptions entity by id.
func (m *PhaseOptionsMutation) SetUserOptionsID(id int) {
	m.user_options = &id
}

// ClearUserOptions clears the "user_options" edge to the UserOptions entity.
func (m *PhaseOptionsMutation) ClearUserOptions() {
	m.cleareduser_options = true
}

// UserOptionsCleared reports if the "user_options" edge to the UserOptions entity was cleared.
func (m *PhaseOptionsMutation) UserOptionsCleared() bool {
	return m.cleareduser_options
}

// UserOptionsID returns the "user_options" edge ID in the mutation.
func (m *PhaseOptionsMutation) UserOptionsID() (id int, exists bool) {
	if m.user_options != nil {
		return *m.user_options, true
	}
	return
}

// UserOptionsIDs returns the "user_options" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserOptionsID instead. It exists only for internal usage by the builders.
func (m *PhaseOptionsMutation) UserOptionsIDs() (ids []int) {
	if id := m.user_options; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserOptions resets all changes to the "user_options" edge.
func (m *PhaseOptionsMutation) ResetUserOptions() {
	m.user_options = nil
	m.cleareduser_options = false
}

// Where appends a list predicates to the PhaseOptionsMutation builder.
func (m *PhaseOptionsMutation) Where(ps ...predicate.PhaseOptions) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PhaseOptionsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PhaseOptionsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PhaseOptions, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PhaseOptionsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PhaseOptionsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PhaseOptions).
func (m *PhaseOptionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PhaseOptionsMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.phase_name != nil {
		fields = append(fields, phaseoptions.FieldPhaseName)
	}
	if m.client != nil {
		fields = append(fields, phaseoptions.FieldClient)
	}
	if m.model != nil {
		fields = append(fields, phaseoptions.FieldModel)
	}
	if m.prompt != nil {
		fields = append(fields, phaseoptions.FieldPrompt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PhaseOptionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case phaseoptions.FieldPhaseName:
		return m.PhaseName()
	case phaseoptions.FieldClient:
		return m.GetClient()
	case phaseoptions.FieldModel:
		return m.Model()
	case phaseoptions.FieldPrompt:
		return m.Prompt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PhaseOptionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case phaseoptions.FieldPhaseName:
		return m.OldPhaseName(ctx)
	case phaseoptions.FieldClient:
		return m.OldClient(ctx)
	case phaseoptions.FieldModel:
		return m.OldModel(ctx)
	case phaseoptions.FieldPrompt:
		return m.OldPrompt(ctx)
	}
	return nil, fmt.Errorf("unknown PhaseOptions field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhaseOptionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case phaseoptions.FieldPhaseName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhaseName(v)
		return nil
	case phaseoptions.FieldClient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClient(v)
		return nil
	case phaseoptions.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case phaseoptions.FieldPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrompt(v)
		return nil
	}
	return fmt.Errorf("unknown PhaseOptions field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PhaseOptionsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PhaseOptionsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhaseOptionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PhaseOptions numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PhaseOptionsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(phaseoptions.FieldClient) {
		fields = append(fields, phaseoptions.FieldClient)
	}
	if m.FieldCleared(phaseoptions.FieldModel) {
		fields = append(fields, phaseoptions.FieldModel)
	}
	if m.FieldCleared(phaseoptions.FieldPrompt) {
		fields = append(fields, phaseoptions.FieldPrompt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PhaseOptionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhaseOptionsMutation) ClearField(name string) error {
	switch name {
	case phaseoptions.FieldClient:
		m.ClearClient()
		return nil
	case phaseoptions.FieldModel:
		m.ClearModel()
		return nil
	case phaseoptions.FieldPrompt:
		m.ClearPrompt()
		return nil
	}
	return fmt.Errorf("unknown PhaseOptions nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PhaseOptionsMutation) ResetField(name string) error {
	switch name {
	case phaseoptions.FieldPhaseName:
		m.ResetPhaseName()
		return nil
	case phaseoptions.FieldClient:
		m.ResetClient()
		return nil
	case phaseoptions.FieldModel:
		m.ResetModel()
		return nil
	case phaseoptions.FieldPrompt:
		m.ResetPrompt()
		return nil
	}
	return fmt.Errorf("unknown PhaseOptions field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PhaseOptionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user_options != nil {
		edges = append(edges, phaseoptions.EdgeUserOptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PhaseOptionsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case phaseoptions.EdgeUserOptions:
		if id := m.user_options; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PhaseOptionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PhaseOptionsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PhaseOptionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser_options {
		edges = append(edges, phaseoptions.EdgeUserOptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PhaseOptionsMutation) EdgeCleared(name string) bool {
	switch name {
	case phaseoptions.EdgeUserOptions:
		return m.cleareduser_options
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PhaseOptionsMutation) ClearEdge(name string) error {
	switch name {
	case phaseoptions.EdgeUserOptions:
		m.ClearUserOptions()
		return nil
	}
	return fmt.Errorf("unknown PhaseOptions unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PhaseOptionsMutation) ResetEdge(name string) error {
	switch name {
	case phaseoptions.EdgeUserOptions:
		m.ResetUserOptions()
		return nil
	}
	return fmt.Errorf("unknown PhaseOptions edge %s", name)
}

// UserOptionsMutation represents an operation that mutates the UserOptions nodes in the graph.
type UserOptionsMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	video_url            *string
	user_style_prompt    *string
	client               *string
	model                *string
	mode                 *string
	chapters_as_sections *bool
	embed_video          *bool
	include_description  *bool
	include_tags         *bool
	clearedFields        map[string]struct{}
	article              *int
	clearedarticle       bool
	phase_options        map[int]struct{}
	removedphase_options map[int]struct{}
	clearedphase_options bool
	done                 bool
	oldValue             func(context.Context) (*UserOptions, error)
	predicates           []predicate.UserOptions
}

var _ ent.Mutation = (*UserOptionsMutation)(nil)

// useroptionsOption allows management of the mutation configuration using functional options.
type useroptionsOption func(*UserOptionsMutation)

// newUserOptionsMutation creates new mutation for the UserOptions entity.
func newUserOptionsMutation(c config, op Op, opts ...useroptionsOption) *UserOptionsMutation {
	m := &UserOptionsMutation{
		config:        c,
		op:            op,
		typ:           TypeUserOptions,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserOptionsID sets the ID field of the mutation.
func withUserOptionsID(id int) useroptionsOption {
	return func(m *UserOptionsMutation) {
		var (
			err   error
			once  sync.Once
			value *UserOptions
		)
		m.oldValue = func(ctx context.Context) (*UserOptions, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserOptions.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserOptions sets the old UserOptions of the mutation.
func withUserOptions(node *UserOptions) useroptionsOption {
	return func(m *UserOptionsMutation) {
		m.oldValue = func(context.Context) (*UserOptions, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserOptionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserOptionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserOptionsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserOptionsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserOptions.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVideoURL sets the "video_url" field.
func (m *UserOptionsMutation) SetVideoURL(s string) {
	m.video_url = &s
}

// VideoURL returns the value of the "video_url" field in the mutation.
func (m *UserOptionsMutation) VideoURL() (r string, exists bool) {
	v := m.video_url
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoURL returns the old "video_url" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldVideoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoURL: %w", err)
	}
	return oldValue.VideoURL, nil
}

// ResetVideoURL resets all changes to the "video_url" field.
func (m *UserOptionsMutation) ResetVideoURL() {
	m.video_url = nil
}

// SetUserStylePrompt sets the "user_style_prompt" field.
func (m *UserOptionsMutation) SetUserStylePrompt(s string) {
	m.user_style_prompt = &s
}

// UserStylePrompt returns the value of the "user_style_prompt" field in the mutation.
func (m *UserOptionsMutation) UserStylePrompt() (r string, exists bool) {
	v := m.user_style_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldUserStylePrompt returns the old "user_style_prompt" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldUserStylePrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserStylePrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserStylePrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserStylePrompt: %w", err)
	}
	return oldValue.UserStylePrompt, nil
}

// ClearUserStylePrompt clears the value of the "user_style_prompt" field.
func (m *UserOptionsMutation) ClearUserStylePrompt() {
	m.user_style_prompt = nil
	m.clearedFields[useroptions.FieldUserStylePrompt] = struct{}{}
}

// UserStylePromptCleared returns if the "user_style_prompt" field was cleared in this mutation.
func (m *UserOptionsMutation) UserStylePromptCleared() bool {
	_, ok := m.clearedFields[useroptions.FieldUserStylePrompt]
	return ok
}

// ResetUserStylePrompt resets all changes to the "user_style_prompt" field.
func (m *UserOptionsMutation) ResetUserStylePrompt() {
	m.user_style_prompt = nil
	delete(m.clearedFields, useroptions.FieldUserStylePrompt)
}

// SetClient sets the "client" field.
func (m *UserOptionsMutation) SetClient(s string) {
	m.client = &s
}

// GetClient returns the value of the "client" field in the mutation.
func (m *UserOptionsMutation) GetClient() (r string, exists bool) {
	v := m.client
	if v == nil {
		return
	}
	return *v, true
}

// OldClient returns the old "client" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldClient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClient: %w", err)
	}
	return oldValue.Client, nil
}

// ClearClient clears the value of the "client" field.
func (m *UserOptionsMutation) ClearClient() {
	m.client = nil
	m.clearedFields[useroptions.FieldClient] = struct{}{}
}

// ClientCleared returns if the "client" field was cleared in this mutation.
func (m *UserOptionsMutation) ClientCleared() bool {
	_, ok := m.clearedFields[useroptions.FieldClient]
	return ok
}

// ResetClient resets all changes to the "client" field.
func (m *UserOptionsMutation) ResetClient() {
	m.client = nil
	delete(m.clearedFields, useroptions.FieldClient)
}

// SetModel sets the "model" field.
func (m *UserOptionsMutation) SetModel(s string) {
	m.model = &s
}

// Model returns the value of the "model" field in the mutation.
func (m *UserOptionsMutation) Model() (r string, exists bool) {
	v := m.model
	if v == nil {
		return
	}
	return *v, true
}

// OldModel returns the old "model" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldModel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModel: %w", err)
	}
	return oldValue.Model, nil
}

// ClearModel clears the value of the "model" field.
func (m *UserOptionsMutation) ClearModel() {
	m.model = nil
	m.clearedFields[useroptions.FieldModel] = struct{}{}
}

// ModelCleared returns if the "model" field was cleared in this mutation.
func (m *UserOptionsMutation) ModelCleared() bool {
	_, ok := m.clearedFields[useroptions.FieldModel]
	return ok
}

// ResetModel resets all changes to the "model" field.
func (m *UserOptionsMutation) ResetModel() {
	m.model = nil
	delete(m.clearedFields, useroptions.FieldModel)
}

// SetMode sets the "mode" field.
func (m *UserOptionsMutation) SetMode(s string) {
	m.mode = &s
}

// Mode returns the value of the "mode" field in the mutation.
func (m *UserOptionsMutation) Mode() (r string, exists bool) {
	v := m.mode
	if v == nil {
		return
	}
	return *v, true
}

// OldMode returns the old "mode" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMode: %w", err)
	}
	return oldValue.Mode, nil
}

// ClearMode clears the value of the "mode" field.
func (m *UserOptionsMutation) ClearMode() {
	m.mode = nil
	m.clearedFields[useroptions.FieldMode] = struct{}{}
}

// ModeCleared returns if the "mode" field was cleared in this mutation.
func (m *UserOptionsMutation) ModeCleared() bool {
	_, ok := m.clearedFields[useroptions.FieldMode]
	return ok
}

// ResetMode resets all changes to the "mode" field.
func (m *UserOptionsMutation) ResetMode() {
	m.mode = nil
	delete(m.clearedFields, useroptions.FieldMode)
}

// SetChaptersAsSections sets the "chapters_as_sections" field.
func (m *UserOptionsMutation) SetChaptersAsSections(b bool) {
	m.chapters_as_sections = &b
}

// ChaptersAsSections returns the value of the "chapters_as_sections" field in the mutation.
func (m *UserOptionsMutation) ChaptersAsSections() (r bool, exists bool) {
	v := m.chapters_as_sections
	if v == nil {
		return
	}
	return *v, true
}

// OldChaptersAsSections returns the old "chapters_as_sections" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldChaptersAsSections(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChaptersAsSections is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChaptersAsSections requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChaptersAsSections: %w", err)
	}
	return oldValue.ChaptersAsSections, nil
}

// ResetChaptersAsSections resets all changes to the "chapters_as_sections" field.
func (m *UserOptionsMutation) ResetChaptersAsSections() {
	m.chapters_as_sections = nil
}

// SetEmbedVideo sets the "embed_video" field.
func (m *UserOptionsMutation) SetEmbedVideo(b bool) {
	m.embed_video = &b
}

// EmbedVideo returns the value of the "embed_video" field in the mutation.
func (m *UserOptionsMutation) EmbedVideo() (r bool, exists bool) {
	v := m.embed_video
	if v == nil {
		return
	}
	return *v, true
}

// OldEmbedVideo returns the old "embed_video" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldEmbedVideo(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmbedVideo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmbedVideo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmbedVideo: %w", err)
	}
	return oldValue.EmbedVideo, nil
}

// ResetEmbedVideo resets all changes to the "embed_video" field.
func (m *UserOptionsMutation) ResetEmbedVideo() {
	m.embed_video = nil
}

// SetIncludeDescription sets the "include_description" field.
func (m *UserOptionsMutation) SetIncludeDescription(b bool) {
	m.include_description = &b
}

// IncludeDescription returns the value of the "include_description" field in the mutation.
func (m *UserOptionsMutation) IncludeDescription() (r bool, exists bool) {
	v := m.include_description
	if v == nil {
		return
	}
	return *v, true
}

// OldIncludeDescription returns the old "include_description" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldIncludeDescription(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIncludeDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIncludeDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIncludeDescription: %w", err)
	}
	return oldValue.IncludeDescription, nil
}

// ResetIncludeDescription resets all changes to the "include_description" field.
func (m *UserOptionsMutation) ResetIncludeDescription() {
	m.include_description = nil
}

// SetIncludeTags sets the "include_tags" field.
func (m *UserOptionsMutation) SetIncludeTags(b bool) {
	m.include_tags = &b
}

// IncludeTags returns the value of the "include_tags" field in the mutation.
func (m *UserOptionsMutation) IncludeTags() (r bool, exists bool) {
	v := m.include_tags
	if v == nil {
		return
	}
	return *v, true
}

// OldIncludeTags returns the old "include_tags" field's value of the UserOptions entity.
// If the UserOptions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserOptionsMutation) OldIncludeTags(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIncludeTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIncludeTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIncludeTags: %w", err)
	}
	return oldValue.IncludeTags, nil
}

// ResetIncludeTags resets all changes to the "include_tags" field.
func (m *UserOptionsMutation) ResetIncludeTags() {
	m.include_tags = nil
}

// SetArticleID sets the "article" edge to the Article entity by id.
func (m *UserOptionsMutation) SetArticleID(id int) {
	m.article = &id
}

// ClearArticle clears the "article" edge to the Article entity.
func (m *UserOptionsMutation) ClearArticle() {
	m.clearedarticle = true
}

// ArticleCleared reports if the "article" edge to the Article entity was cleared.
func (m *UserOptionsMutation) ArticleCleared() bool {
	return m.clearedarticle
}

// ArticleID returns the "article" edge ID in the mutation.
func (m *UserOptionsMutation) ArticleID() (id int, exists bool) {
	if m.article != nil {
		return *m.article, true
	}
	return
}

// ArticleIDs returns the "article" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ArticleID instead. It exists only for internal usage by the builders.
func (m *UserOptionsMutation) ArticleIDs() (ids []int) {
	if id := m.article; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArticle resets all changes to the "article" edge.
func (m *UserOptionsMutation) ResetArticle() {
	m.article = nil
	m.clearedarticle = false
}

// AddPhaseOptionIDs adds the "phase_options" edge to the PhaseOptions entity by ids.
func (m *UserOptionsMutation) AddPhaseOptionIDs(ids ...int) {
	if m.phase_options == nil {
		m.phase_options = make(map[int]struct{})
	}
	for i := range ids {
		m.phase_options[ids[i]] = struct{}{}
	}
}

// ClearPhaseOptions clears the "phase_options" edge to the PhaseOptions entity.
func (m *UserOptionsMutation) ClearPhaseOptions() {
	m.clearedphase_options = true
}

// PhaseOptionsCleared reports if the "phase_options" edge to the PhaseOptions entity was cleared.
func (m *UserOptionsMutation) PhaseOptionsCleared() bool {
	return m.clearedphase_options
}

// RemovePhaseOptionIDs removes the "phase_options" edge to the PhaseOptions entity by IDs.
func (m *UserOptionsMutation) RemovePhaseOptionIDs(ids ...int) {
	if m.removedphase_options == nil {
		m.removedphase_options = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.phase_options, ids[i])
		m.removedphase_options[ids[i]] = struct{}{}
	}
}

// RemovedPhaseOptions returns the removed IDs of the "phase_options" edge to the PhaseOptions entity.
func (m *UserOptionsMutation) RemovedPhaseOptionsIDs() (ids []int) {
	for id := range m.removedphase_options {
		ids = append(ids, id)
	}
	return
}

// PhaseOptionsIDs returns the "phase_options" edge IDs in the mutation.
func (m *UserOptionsMutation) PhaseOptionsIDs() (ids []int) {
	for id := range m.phase_options {
		ids = append(ids, id)
	}
	return
}

// ResetPhaseOptions resets all changes to the "phase_options" edge.
func (m *UserOptionsMutation) ResetPhaseOptions() {
	m.phase_options = nil
	m.clearedphase_options = false
	m.removedphase_options = nil
}

// Where appends a list predicates to the UserOptionsMutation builder.
func (m *UserOptionsMutation) Where(ps ...predicate.UserOptions) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserOptionsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserOptionsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserOptions, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserOptionsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserOptionsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserOptions).
func (m *UserOptionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserOptionsMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.video_url != nil {
		fields = append(fields, useroptions.FieldVideoURL)
	}
	if m.user_style_prompt != nil {
		fields = append(fields, useroptions.FieldUserStylePrompt)
	}
	if m.client != nil {
		fields = append(fields, useroptions.FieldClient)
	}
	if m.model != nil {
		fields = append(fields, useroptions.FieldModel)
	}
	if m.mode != nil {
		fields = append(fields, useroptions.FieldMode)
	}
	if m.chapters_as_sections != nil {
		fields = append(fields, useroptions.FieldChaptersAsSections)
	}
	if m.embed_video != nil {
		fields = append(fields, useroptions.FieldEmbedVideo)
	}
	if m.include_description != nil {
		fields = append(fields, useroptions.FieldIncludeDescription)
	}
	if m.include_tags != nil {
		fields = append(fields, useroptions.FieldIncludeTags)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserOptionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case useroptions.FieldVideoURL:
		return m.VideoURL()
	case useroptions.FieldUserStylePrompt:
		return m.UserStylePrompt()
	case useroptions.FieldClient:
		return m.GetClient()
	case useroptions.FieldModel:
		return m.Model()
	case useroptions.FieldMode:
		return m.Mode()
	case useroptions.FieldChaptersAsSections:
		return m.ChaptersAsSections()
	case useroptions.FieldEmbedVideo:
		return m.EmbedVideo()
	case useroptions.FieldIncludeDescription:
		return m.IncludeDescription()
	case useroptions.FieldIncludeTags:
		return m.IncludeTags()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserOptionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case useroptions.FieldVideoURL:
		return m.OldVideoURL(ctx)
	case useroptions.FieldUserStylePrompt:
		return m.OldUserStylePrompt(ctx)
	case useroptions.FieldClient:
		return m.OldClient(ctx)
	case useroptions.FieldModel:
		return m.OldModel(ctx)
	case useroptions.FieldMode:
		return m.OldMode(ctx)
	case useroptions.FieldChaptersAsSections:
		return m.OldChaptersAsSections(ctx)
	case useroptions.FieldEmbedVideo:
		return m.OldEmbedVideo(ctx)
	case useroptions.FieldIncludeDescription:
		return m.OldIncludeDescription(ctx)
	case useroptions.FieldIncludeTags:
		return m.OldIncludeTags(ctx)
	}
	return nil, fmt.Errorf("unknown UserOptions field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOptionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case useroptions.FieldVideoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoURL(v)
		return nil
	case useroptions.FieldUserStylePrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserStylePrompt(v)
		return nil
	case useroptions.FieldClient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClient(v)
		return nil
	case useroptions.FieldModel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModel(v)
		return nil
	case useroptions.FieldMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMode(v)
		return nil
	case useroptions.FieldChaptersAsSections:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChaptersAsSections(v)
		return nil
	case useroptions.FieldEmbedVideo:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmbedVideo(v)
		return nil
	case useroptions.FieldIncludeDescription:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIncludeDescription(v)
		return nil
	case useroptions.FieldIncludeTags:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIncludeTags(v)
		return nil
	}
	return fmt.Errorf("unknown UserOptions field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserOptionsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserOptionsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserOptionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserOptions numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserOptionsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(useroptions.FieldUserStylePrompt) {
		fields = append(fields, useroptions.FieldUserStylePrompt)
	}
	if m.FieldCleared(useroptions.FieldClient) {
		fields = append(fields, useroptions.FieldClient)
	}
	if m.FieldCleared(useroptions.FieldModel) {
		fields = append(fields, useroptions.FieldModel)
	}
	if m.FieldCleared(useroptions.FieldMode) {
		fields = append(fields, useroptions.FieldMode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserOptionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserOptionsMutation) ClearField(name string) error {
	switch name {
	case useroptions.FieldUserStylePrompt:
		m.ClearUserStylePrompt()
		return nil
	case useroptions.FieldClient:
		m.ClearClient()
		return nil
	case useroptions.FieldModel:
		m.ClearModel()
		return nil
	case useroptions.FieldMode:
		m.ClearMode()
		return nil
	}
	return fmt.Errorf("unknown UserOptions nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserOptionsMutation) ResetField(name string) error {
	switch name {
	case useroptions.FieldVideoURL:
		m.ResetVideoURL()
		return nil
	case useroptions.FieldUserStylePrompt:
		m.ResetUserStylePrompt()
		return nil
	case useroptions.FieldClient:
		m.ResetClient()
		return nil
	case useroptions.FieldModel:
		m.ResetModel()
		return nil
	case useroptions.FieldMode:
		m.ResetMode()
		return nil
	case useroptions.FieldChaptersAsSections:
		m.ResetChaptersAsSections()
		return nil
	case useroptions.FieldEmbedVideo:
		m.ResetEmbedVideo()
		return nil
	case useroptions.FieldIncludeDescription:
		m.ResetIncludeDescription()
		return nil
	case useroptions.FieldIncludeTags:
		m.ResetIncludeTags()
		return nil
	}
	return fmt.Errorf("unknown UserOptions field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserOptionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.article != nil {
		edges = append(edges, useroptions.EdgeArticle)
	}
	if m.phase_options != nil {
		edges = append(edges, useroptions.EdgePhaseOptions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserOptionsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case useroptions.EdgeArticle:
		if id := m.article; id != nil {
			return []ent.Value{*id}
		}
	case useroptions.EdgePhaseOptions:
		ids := make([]ent.Value, 0, len(m.phase_options))
		for id := range m.phase_options {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserOptionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedphase_options != nil {
		edges = append(edges, useroptions.EdgePhaseOptions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserOptionsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case useroptions.EdgePhaseOptions:
		ids := make([]ent.Value, 0, len(m.removedphase_options))
		for id := range m.removedphase_options {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserOptionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedarticle {
		edges = append(edges, useroptions.EdgeArticle)
	}
	if m.clearedphase_options {
		edges = append(edges, useroptions.EdgePhaseOptions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserOptionsMutation) EdgeCleared(name string) bool {
	switch name {
	case useroptions.EdgeArticle:
		return m.clearedarticle
	case useroptions.EdgePhaseOptions:
		return m.clearedphase_options
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserOptionsMutation) ClearEdge(name string) error {
	switch name {
	case useroptions.EdgeArticle:
		m.ClearArticle()
		return nil
	}
	return fmt.Errorf("unknown UserOptions unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserOptionsMutation) ResetEdge(name string) error {
	switch name {
	case useroptions.EdgeArticle:
		m.ResetArticle()
		return nil
	case useroptions.EdgePhaseOptions:
		m.ResetPhaseOptions()
		return nil
	}
	return fmt.Errorf("unknown UserOptions edge %s", name)
}
