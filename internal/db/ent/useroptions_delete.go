// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/predicate"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// UserOptionsDelete is the builder for deleting a UserOptions entity.
type UserOptionsDelete struct {
	config
	hooks    []Hook
	mutation *UserOptionsMutation
}

// Where appends a list predicates to the UserOptionsDelete builder.
func (uod *UserOptionsDelete) Where(ps ...predicate.UserOptions) *UserOptionsDelete {
	uod.mutation.Where(ps...)
	return uod
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (uod *UserOptionsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, uod.sqlExec, uod.mutation, uod.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (uod *UserOptionsDelete) ExecX(ctx context.Context) int {
	n, err := uod.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (uod *UserOptionsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(useroptions.Table, sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt))
	if ps := uod.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, uod.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	uod.mutation.done = true
	return affected, err
}

// UserOptionsDeleteOne is the builder for deleting a single UserOptions entity.
type UserOptionsDeleteOne struct {
	uod *UserOptionsDelete
}

// Where appends a list predicates to the UserOptionsDelete builder.
func (uodo *UserOptionsDeleteOne) Where(ps ...predicate.UserOptions) *UserOptionsDeleteOne {
	uodo.uod.mutation.Where(ps...)
	return uodo
}

// Exec executes the deletion query.
func (uodo *UserOptionsDeleteOne) Exec(ctx context.Context) error {
	n, err := uodo.uod.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{useroptions.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (uodo *UserOptionsDeleteOne) ExecX(ctx context.Context) {
	if err := uodo.Exec(ctx); err != nil {
		panic(err)
	}
}
