// Code generated by ent, DO NOT EDIT.

package useroptions

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the useroptions type in the database.
	Label = "user_options"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldUserStylePrompt holds the string denoting the user_style_prompt field in the database.
	FieldUserStylePrompt = "user_style_prompt"
	// FieldClient holds the string denoting the client field in the database.
	FieldClient = "client"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldMode holds the string denoting the mode field in the database.
	FieldMode = "mode"
	// FieldChaptersAsSections holds the string denoting the chapters_as_sections field in the database.
	FieldChaptersAsSections = "chapters_as_sections"
	// FieldEmbedVideo holds the string denoting the embed_video field in the database.
	FieldEmbedVideo = "embed_video"
	// FieldIncludeDescription holds the string denoting the include_description field in the database.
	FieldIncludeDescription = "include_description"
	// FieldIncludeTags holds the string denoting the include_tags field in the database.
	FieldIncludeTags = "include_tags"
	// EdgeArticle holds the string denoting the article edge name in mutations.
	EdgeArticle = "article"
	// EdgePhaseOptions holds the string denoting the phase_options edge name in mutations.
	EdgePhaseOptions = "phase_options"
	// Table holds the table name of the useroptions in the database.
	Table = "user_options"
	// ArticleTable is the table that holds the article relation/edge.
	ArticleTable = "articles"
	// ArticleInverseTable is the table name for the Article entity.
	// It exists in this package in order to avoid circular dependency with the "article" package.
	ArticleInverseTable = "articles"
	// ArticleColumn is the table column denoting the article relation/edge.
	ArticleColumn = "user_options_article"
	// PhaseOptionsTable is the table that holds the phase_options relation/edge.
	PhaseOptionsTable = "phase_options"
	// PhaseOptionsInverseTable is the table name for the PhaseOptions entity.
	// It exists in this package in order to avoid circular dependency with the "phaseoptions" package.
	PhaseOptionsInverseTable = "phase_options"
	// PhaseOptionsColumn is the table column denoting the phase_options relation/edge.
	PhaseOptionsColumn = "user_options_phase_options"
)

// Columns holds all SQL columns for useroptions fields.
var Columns = []string{
	FieldID,
	FieldVideoURL,
	FieldUserStylePrompt,
	FieldClient,
	FieldModel,
	FieldMode,
	FieldChaptersAsSections,
	FieldEmbedVideo,
	FieldIncludeDescription,
	FieldIncludeTags,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// VideoURLValidator is a validator for the "video_url" field. It is called by the builders before save.
	VideoURLValidator func(string) error
	// DefaultChaptersAsSections holds the default value on creation for the "chapters_as_sections" field.
	DefaultChaptersAsSections bool
	// DefaultEmbedVideo holds the default value on creation for the "embed_video" field.
	DefaultEmbedVideo bool
	// DefaultIncludeDescription holds the default value on creation for the "include_description" field.
	DefaultIncludeDescription bool
	// DefaultIncludeTags holds the default value on creation for the "include_tags" field.
	DefaultIncludeTags bool
)

// OrderOption defines the ordering options for the UserOptions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByUserStylePrompt orders the results by the user_style_prompt field.
func ByUserStylePrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserStylePrompt, opts...).ToFunc()
}

// ByClient orders the results by the client field.
func ByClient(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClient, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByMode orders the results by the mode field.
func ByMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMode, opts...).ToFunc()
}

// ByChaptersAsSections orders the results by the chapters_as_sections field.
func ByChaptersAsSections(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChaptersAsSections, opts...).ToFunc()
}

// ByEmbedVideo orders the results by the embed_video field.
func ByEmbedVideo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmbedVideo, opts...).ToFunc()
}

// ByIncludeDescription orders the results by the include_description field.
func ByIncludeDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncludeDescription, opts...).ToFunc()
}

// ByIncludeTags orders the results by the include_tags field.
func ByIncludeTags(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIncludeTags, opts...).ToFunc()
}

// ByArticleField orders the results by article field.
func ByArticleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newArticleStep(), sql.OrderByField(field, opts...))
	}
}

// ByPhaseOptionsCount orders the results by phase_options count.
func ByPhaseOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPhaseOptionsStep(), opts...)
	}
}

// ByPhaseOptions orders the results by phase_options terms.
func ByPhaseOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPhaseOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newArticleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ArticleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ArticleTable, ArticleColumn),
	)
}
func newPhaseOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PhaseOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PhaseOptionsTable, PhaseOptionsColumn),
	)
}
