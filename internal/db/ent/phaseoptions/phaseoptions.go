// Code generated by ent, DO NOT EDIT.

package phaseoptions

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the phaseoptions type in the database.
	Label = "phase_options"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPhaseName holds the string denoting the phase_name field in the database.
	FieldPhaseName = "phase_name"
	// FieldClient holds the string denoting the client field in the database.
	FieldClient = "client"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// EdgeUserOptions holds the string denoting the user_options edge name in mutations.
	EdgeUserOptions = "user_options"
	// Table holds the table name of the phaseoptions in the database.
	Table = "phase_options"
	// UserOptionsTable is the table that holds the user_options relation/edge.
	UserOptionsTable = "phase_options"
	// UserOptionsInverseTable is the table name for the UserOptions entity.
	// It exists in this package in order to avoid circular dependency with the "useroptions" package.
	UserOptionsInverseTable = "user_options"
	// UserOptionsColumn is the table column denoting the user_options relation/edge.
	UserOptionsColumn = "user_options_phase_options"
)

// Columns holds all SQL columns for phaseoptions fields.
var Columns = []string{
	FieldID,
	FieldPhaseName,
	FieldClient,
	FieldModel,
	FieldPrompt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "phase_options"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_options_phase_options",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// PhaseNameValidator is a validator for the "phase_name" field. It is called by the builders before save.
	PhaseNameValidator func(string) error
)

// OrderOption defines the ordering options for the PhaseOptions queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPhaseName orders the results by the phase_name field.
func ByPhaseName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhaseName, opts...).ToFunc()
}

// ByClient orders the results by the client field.
func ByClient(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClient, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByUserOptionsField orders the results by user_options field.
func ByUserOptionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserOptionsStep(), sql.OrderByField(field, opts...))
	}
}
func newUserOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserOptionsTable, UserOptionsColumn),
	)
}
