// Code generated by ent, DO NOT EDIT.

package phaseoptions

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLTE(FieldID, id))
}

// PhaseName applies equality check predicate on the "phase_name" field. It's identical to PhaseNameEQ.
func PhaseName(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldPhaseName, v))
}

// Client applies equality check predicate on the "client" field. It's identical to ClientEQ.
func Client(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldClient, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldModel, v))
}

// Prompt applies equality check predicate on the "prompt" field. It's identical to PromptEQ.
func Prompt(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldPrompt, v))
}

// PhaseNameEQ applies the EQ predicate on the "phase_name" field.
func PhaseNameEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldPhaseName, v))
}

// PhaseNameNEQ applies the NEQ predicate on the "phase_name" field.
func PhaseNameNEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNEQ(FieldPhaseName, v))
}

// PhaseNameIn applies the In predicate on the "phase_name" field.
func PhaseNameIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIn(FieldPhaseName, vs...))
}

// PhaseNameNotIn applies the NotIn predicate on the "phase_name" field.
func PhaseNameNotIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotIn(FieldPhaseName, vs...))
}

// PhaseNameGT applies the GT predicate on the "phase_name" field.
func PhaseNameGT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGT(FieldPhaseName, v))
}

// PhaseNameGTE applies the GTE predicate on the "phase_name" field.
func PhaseNameGTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGTE(FieldPhaseName, v))
}

// PhaseNameLT applies the LT predicate on the "phase_name" field.
func PhaseNameLT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLT(FieldPhaseName, v))
}

// PhaseNameLTE applies the LTE predicate on the "phase_name" field.
func PhaseNameLTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLTE(FieldPhaseName, v))
}

// PhaseNameContains applies the Contains predicate on the "phase_name" field.
func PhaseNameContains(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContains(FieldPhaseName, v))
}

// PhaseNameHasPrefix applies the HasPrefix predicate on the "phase_name" field.
func PhaseNameHasPrefix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasPrefix(FieldPhaseName, v))
}

// PhaseNameHasSuffix applies the HasSuffix predicate on the "phase_name" field.
func PhaseNameHasSuffix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasSuffix(FieldPhaseName, v))
}

// PhaseNameEqualFold applies the EqualFold predicate on the "phase_name" field.
func PhaseNameEqualFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEqualFold(FieldPhaseName, v))
}

// PhaseNameContainsFold applies the ContainsFold predicate on the "phase_name" field.
func PhaseNameContainsFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContainsFold(FieldPhaseName, v))
}

// ClientEQ applies the EQ predicate on the "client" field.
func ClientEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldClient, v))
}

// ClientNEQ applies the NEQ predicate on the "client" field.
func ClientNEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNEQ(FieldClient, v))
}

// ClientIn applies the In predicate on the "client" field.
func ClientIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIn(FieldClient, vs...))
}

// ClientNotIn applies the NotIn predicate on the "client" field.
func ClientNotIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotIn(FieldClient, vs...))
}

// ClientGT applies the GT predicate on the "client" field.
func ClientGT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGT(FieldClient, v))
}

// ClientGTE applies the GTE predicate on the "client" field.
func ClientGTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGTE(FieldClient, v))
}

// ClientLT applies the LT predicate on the "client" field.
func ClientLT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLT(FieldClient, v))
}

// ClientLTE applies the LTE predicate on the "client" field.
func ClientLTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLTE(FieldClient, v))
}

// ClientContains applies the Contains predicate on the "client" field.
func ClientContains(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContains(FieldClient, v))
}

// ClientHasPrefix applies the HasPrefix predicate on the "client" field.
func ClientHasPrefix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasPrefix(FieldClient, v))
}

// ClientHasSuffix applies the HasSuffix predicate on the "client" field.
func ClientHasSuffix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasSuffix(FieldClient, v))
}

// ClientIsNil applies the IsNil predicate on the "client" field.
func ClientIsNil() predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIsNull(FieldClient))
}

// ClientNotNil applies the NotNil predicate on the "client" field.
func ClientNotNil() predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotNull(FieldClient))
}

// ClientEqualFold applies the EqualFold predicate on the "client" field.
func ClientEqualFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEqualFold(FieldClient, v))
}

// ClientContainsFold applies the ContainsFold predicate on the "client" field.
func ClientContainsFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContainsFold(FieldClient, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContainsFold(FieldModel, v))
}

// PromptEQ applies the EQ predicate on the "prompt" field.
func PromptEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEQ(FieldPrompt, v))
}

// PromptNEQ applies the NEQ predicate on the "prompt" field.
func PromptNEQ(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNEQ(FieldPrompt, v))
}

// PromptIn applies the In predicate on the "prompt" field.
func PromptIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIn(FieldPrompt, vs...))
}

// PromptNotIn applies the NotIn predicate on the "prompt" field.
func PromptNotIn(vs ...string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotIn(FieldPrompt, vs...))
}

// PromptGT applies the GT predicate on the "prompt" field.
func PromptGT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGT(FieldPrompt, v))
}

// PromptGTE applies the GTE predicate on the "prompt" field.
func PromptGTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldGTE(FieldPrompt, v))
}

// PromptLT applies the LT predicate on the "prompt" field.
func PromptLT(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLT(FieldPrompt, v))
}

// PromptLTE applies the LTE predicate on the "prompt" field.
func PromptLTE(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldLTE(FieldPrompt, v))
}

// PromptContains applies the Contains predicate on the "prompt" field.
func PromptContains(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContains(FieldPrompt, v))
}

// PromptHasPrefix applies the HasPrefix predicate on the "prompt" field.
func PromptHasPrefix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasPrefix(FieldPrompt, v))
}

// PromptHasSuffix applies the HasSuffix predicate on the "prompt" field.
func PromptHasSuffix(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldHasSuffix(FieldPrompt, v))
}

// PromptIsNil applies the IsNil predicate on the "prompt" field.
func PromptIsNil() predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldIsNull(FieldPrompt))
}

// PromptNotNil applies the NotNil predicate on the "prompt" field.
func PromptNotNil() predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldNotNull(FieldPrompt))
}

// PromptEqualFold applies the EqualFold predicate on the "prompt" field.
func PromptEqualFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldEqualFold(FieldPrompt, v))
}

// PromptContainsFold applies the ContainsFold predicate on the "prompt" field.
func PromptContainsFold(v string) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.FieldContainsFold(FieldPrompt, v))
}

// HasUserOptions applies the HasEdge predicate on the "user_options" edge.
func HasUserOptions() predicate.PhaseOptions {
	return predicate.PhaseOptions(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserOptionsTable, UserOptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserOptionsWith applies the HasEdge predicate on the "user_options" edge with a given conditions (other predicates).
func HasUserOptionsWith(preds ...predicate.UserOptions) predicate.PhaseOptions {
	return predicate.PhaseOptions(func(s *sql.Selector) {
		step := newUserOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PhaseOptions) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PhaseOptions) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PhaseOptions) predicate.PhaseOptions {
	return predicate.PhaseOptions(sql.NotPredicates(p))
}
