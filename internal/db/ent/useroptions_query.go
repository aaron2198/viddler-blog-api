// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/article"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/phaseoptions"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/predicate"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// UserOptionsQuery is the builder for querying UserOptions entities.
type UserOptionsQuery struct {
	config
	ctx              *QueryContext
	order            []useroptions.OrderOption
	inters           []Interceptor
	predicates       []predicate.UserOptions
	withArticle      *ArticleQuery
	withPhaseOptions *PhaseOptionsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserOptionsQuery builder.
func (uoq *UserOptionsQuery) Where(ps ...predicate.UserOptions) *UserOptionsQuery {
	uoq.predicates = append(uoq.predicates, ps...)
	return uoq
}

// Limit the number of records to be returned by this query.
func (uoq *UserOptionsQuery) Limit(limit int) *UserOptionsQuery {
	uoq.ctx.Limit = &limit
	return uoq
}

// Offset to start from.
func (uoq *UserOptionsQuery) Offset(offset int) *UserOptionsQuery {
	uoq.ctx.Offset = &offset
	return uoq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uoq *UserOptionsQuery) Unique(unique bool) *UserOptionsQuery {
	uoq.ctx.Unique = &unique
	return uoq
}

// Order specifies how the records should be ordered.
func (uoq *UserOptionsQuery) Order(o ...useroptions.OrderOption) *UserOptionsQuery {
	uoq.order = append(uoq.order, o...)
	return uoq
}

// QueryArticle chains the current query on the "article" edge.
func (uoq *UserOptionsQuery) QueryArticle() *ArticleQuery {
	query := (&ArticleClient{config: uoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(useroptions.Table, useroptions.FieldID, selector),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, useroptions.ArticleTable, useroptions.ArticleColumn),
		)
		fromU = sqlgraph.SetNeighbors(uoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPhaseOptions chains the current query on the "phase_options" edge.
func (uoq *UserOptionsQuery) QueryPhaseOptions() *PhaseOptionsQuery {
	query := (&PhaseOptionsClient{config: uoq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uoq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uoq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(useroptions.Table, useroptions.FieldID, selector),
			sqlgraph.To(phaseoptions.Table, phaseoptions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, useroptions.PhaseOptionsTable, useroptions.PhaseOptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uoq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserOptions entity from the query.
// Returns a *NotFoundError when no UserOptions was found.
func (uoq *UserOptionsQuery) First(ctx context.Context) (*UserOptions, error) {
	nodes, err := uoq.Limit(1).All(setContextOp(ctx, uoq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{useroptions.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uoq *UserOptionsQuery) FirstX(ctx context.Context) *UserOptions {
	node, err := uoq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserOptions ID from the query.
// Returns a *NotFoundError when no UserOptions ID was found.
func (uoq *UserOptionsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uoq.Limit(1).IDs(setContextOp(ctx, uoq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{useroptions.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uoq *UserOptionsQuery) FirstIDX(ctx context.Context) int {
	id, err := uoq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserOptions entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserOptions entity is found.
// Returns a *NotFoundError when no UserOptions entities are found.
func (uoq *UserOptionsQuery) Only(ctx context.Context) (*UserOptions, error) {
	nodes, err := uoq.Limit(2).All(setContextOp(ctx, uoq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{useroptions.Label}
	default:
		return nil, &NotSingularError{useroptions.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uoq *UserOptionsQuery) OnlyX(ctx context.Context) *UserOptions {
	node, err := uoq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserOptions ID in the query.
// Returns a *NotSingularError when more than one UserOptions ID is found.
// Returns a *NotFoundError when no entities are found.
func (uoq *UserOptionsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uoq.Limit(2).IDs(setContextOp(ctx, uoq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{useroptions.Label}
	default:
		err = &NotSingularError{useroptions.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uoq *UserOptionsQuery) OnlyIDX(ctx context.Context) int {
	id, err := uoq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserOptionsSlice.
func (uoq *UserOptionsQuery) All(ctx context.Context) ([]*UserOptions, error) {
	ctx = setContextOp(ctx, uoq.ctx, ent.OpQueryAll)
	if err := uoq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserOptions, *UserOptionsQuery]()
	return withInterceptors[[]*UserOptions](ctx, uoq, qr, uoq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uoq *UserOptionsQuery) AllX(ctx context.Context) []*UserOptions {
	nodes, err := uoq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserOptions IDs.
func (uoq *UserOptionsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if uoq.ctx.Unique == nil && uoq.path != nil {
		uoq.Unique(true)
	}
	ctx = setContextOp(ctx, uoq.ctx, ent.OpQueryIDs)
	if err = uoq.Select(useroptions.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uoq *UserOptionsQuery) IDsX(ctx context.Context) []int {
	ids, err := uoq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uoq *UserOptionsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uoq.ctx, ent.OpQueryCount)
	if err := uoq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uoq, querierCount[*UserOptionsQuery](), uoq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uoq *UserOptionsQuery) CountX(ctx context.Context) int {
	count, err := uoq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uoq *UserOptionsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uoq.ctx, ent.OpQueryExist)
	switch _, err := uoq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uoq *UserOptionsQuery) ExistX(ctx context.Context) bool {
	exist, err := uoq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserOptionsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uoq *UserOptionsQuery) Clone() *UserOptionsQuery {
	if uoq == nil {
		return nil
	}
	return &UserOptionsQuery{
		config:           uoq.config,
		ctx:              uoq.ctx.Clone(),
		order:            append([]useroptions.OrderOption{}, uoq.order...),
		inters:           append([]Interceptor{}, uoq.inters...),
		predicates:       append([]predicate.UserOptions{}, uoq.predicates...),
		withArticle:      uoq.withArticle.Clone(),
		withPhaseOptions: uoq.withPhaseOptions.Clone(),
		// clone intermediate query.
		sql:  uoq.sql.Clone(),
		path: uoq.path,
	}
}

// WithArticle tells the query-builder to eager-load the nodes that are connected to
// the "article" edge. The optional arguments are used to configure the query builder of the edge.
func (uoq *UserOptionsQuery) WithArticle(opts ...func(*ArticleQuery)) *UserOptionsQuery {
	query := (&ArticleClient{config: uoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uoq.withArticle = query
	return uoq
}

// WithPhaseOptions tells the query-builder to eager-load the nodes that are connected to
// the "phase_options" edge. The optional arguments are used to configure the query builder of the edge.
func (uoq *UserOptionsQuery) WithPhaseOptions(opts ...func(*PhaseOptionsQuery)) *UserOptionsQuery {
	query := (&PhaseOptionsClient{config: uoq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uoq.withPhaseOptions = query
	return uoq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		VideoURL string `json:"video_url,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserOptions.Query().
//		GroupBy(useroptions.FieldVideoURL).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uoq *UserOptionsQuery) GroupBy(field string, fields ...string) *UserOptionsGroupBy {
	uoq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserOptionsGroupBy{build: uoq}
	grbuild.flds = &uoq.ctx.Fields
	grbuild.label = useroptions.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		VideoURL string `json:"video_url,omitempty"`
//	}
//
//	client.UserOptions.Query().
//		Select(useroptions.FieldVideoURL).
//		Scan(ctx, &v)
func (uoq *UserOptionsQuery) Select(fields ...string) *UserOptionsSelect {
	uoq.ctx.Fields = append(uoq.ctx.Fields, fields...)
	sbuild := &UserOptionsSelect{UserOptionsQuery: uoq}
	sbuild.label = useroptions.Label
	sbuild.flds, sbuild.scan = &uoq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserOptionsSelect configured with the given aggregations.
func (uoq *UserOptionsQuery) Aggregate(fns ...AggregateFunc) *UserOptionsSelect {
	return uoq.Select().Aggregate(fns...)
}

func (uoq *UserOptionsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uoq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uoq); err != nil {
				return err
			}
		}
	}
	for _, f := range uoq.ctx.Fields {
		if !useroptions.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uoq.path != nil {
		prev, err := uoq.path(ctx)
		if err != nil {
			return err
		}
		uoq.sql = prev
	}
	return nil
}

func (uoq *UserOptionsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserOptions, error) {
	var (
		nodes       = []*UserOptions{}
		_spec       = uoq.querySpec()
		loadedTypes = [2]bool{
			uoq.withArticle != nil,
			uoq.withPhaseOptions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserOptions).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserOptions{config: uoq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uoq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uoq.withArticle; query != nil {
		if err := uoq.loadArticle(ctx, query, nodes, nil,
			func(n *UserOptions, e *Article) { n.Edges.Article = e }); err != nil {
			return nil, err
		}
	}
	if query := uoq.withPhaseOptions; query != nil {
		if err := uoq.loadPhaseOptions(ctx, query, nodes,
			func(n *UserOptions) { n.Edges.PhaseOptions = []*PhaseOptions{} },
			func(n *UserOptions, e *PhaseOptions) { n.Edges.PhaseOptions = append(n.Edges.PhaseOptions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uoq *UserOptionsQuery) loadArticle(ctx context.Context, query *ArticleQuery, nodes []*UserOptions, init func(*UserOptions), assign func(*UserOptions, *Article)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*UserOptions)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Article(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(useroptions.ArticleColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_options_article
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_options_article" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_options_article" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uoq *UserOptionsQuery) loadPhaseOptions(ctx context.Context, query *PhaseOptionsQuery, nodes []*UserOptions, init func(*UserOptions), assign func(*UserOptions, *PhaseOptions)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*UserOptions)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PhaseOptions(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(useroptions.PhaseOptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_options_phase_options
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_options_phase_options" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_options_phase_options" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uoq *UserOptionsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uoq.querySpec()
	_spec.Node.Columns = uoq.ctx.Fields
	if len(uoq.ctx.Fields) > 0 {
		_spec.Unique = uoq.ctx.Unique != nil && *uoq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uoq.driver, _spec)
}

func (uoq *UserOptionsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(useroptions.Table, useroptions.Columns, sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt))
	_spec.From = uoq.sql
	if unique := uoq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uoq.path != nil {
		_spec.Unique = true
	}
	if fields := uoq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useroptions.FieldID)
		for i := range fields {
			if fields[i] != useroptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uoq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uoq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uoq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uoq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uoq *UserOptionsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uoq.driver.Dialect())
	t1 := builder.Table(useroptions.Table)
	columns := uoq.ctx.Fields
	if len(columns) == 0 {
		columns = useroptions.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uoq.sql != nil {
		selector = uoq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uoq.ctx.Unique != nil && *uoq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uoq.predicates {
		p(selector)
	}
	for _, p := range uoq.order {
		p(selector)
	}
	if offset := uoq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uoq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserOptionsGroupBy is the group-by builder for UserOptions entities.
type UserOptionsGroupBy struct {
	selector
	build *UserOptionsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (uogb *UserOptionsGroupBy) Aggregate(fns ...AggregateFunc) *UserOptionsGroupBy {
	uogb.fns = append(uogb.fns, fns...)
	return uogb
}

// Scan applies the selector query and scans the result into the given value.
func (uogb *UserOptionsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uogb.build.ctx, ent.OpQueryGroupBy)
	if err := uogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserOptionsQuery, *UserOptionsGroupBy](ctx, uogb.build, uogb, uogb.build.inters, v)
}

func (uogb *UserOptionsGroupBy) sqlScan(ctx context.Context, root *UserOptionsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(uogb.fns))
	for _, fn := range uogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*uogb.flds)+len(uogb.fns))
		for _, f := range *uogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*uogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserOptionsSelect is the builder for selecting fields of UserOptions entities.
type UserOptionsSelect struct {
	*UserOptionsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (uos *UserOptionsSelect) Aggregate(fns ...AggregateFunc) *UserOptionsSelect {
	uos.fns = append(uos.fns, fns...)
	return uos
}

// Scan applies the selector query and scans the result into the given value.
func (uos *UserOptionsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, uos.ctx, ent.OpQuerySelect)
	if err := uos.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserOptionsQuery, *UserOptionsSelect](ctx, uos.UserOptionsQuery, uos, uos.inters, v)
}

func (uos *UserOptionsSelect) sqlScan(ctx context.Context, root *UserOptionsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(uos.fns))
	for _, fn := range uos.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*uos.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := uos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
