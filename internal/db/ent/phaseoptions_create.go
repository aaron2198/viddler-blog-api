// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/phaseoptions"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// PhaseOptionsCreate is the builder for creating a PhaseOptions entity.
type PhaseOptionsCreate struct {
	config
	mutation *PhaseOptionsMutation
	hooks    []Hook
}

// SetPhaseName sets the "phase_name" field.
func (poc *PhaseOptionsCreate) SetPhaseName(s string) *PhaseOptionsCreate {
	poc.mutation.SetPhaseName(s)
	return poc
}

// SetClient sets the "client" field.
func (poc *PhaseOptionsCreate) SetClient(s string) *PhaseOptionsCreate {
	poc.mutation.SetClient(s)
	return poc
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (poc *PhaseOptionsCreate) SetNillableClient(s *string) *PhaseOptionsCreate {
	if s != nil {
		poc.SetClient(*s)
	}
	return poc
}

// SetModel sets the "model" field.
func (poc *PhaseOptionsCreate) SetModel(s string) *PhaseOptionsCreate {
	poc.mutation.SetModel(s)
	return poc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (poc *PhaseOptionsCreate) SetNillableModel(s *string) *PhaseOptionsCreate {
	if s != nil {
		poc.SetModel(*s)
	}
	return poc
}

// SetPrompt sets the "prompt" field.
func (poc *PhaseOptionsCreate) SetPrompt(s string) *PhaseOptionsCreate {
	poc.mutation.SetPrompt(s)
	return poc
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (poc *PhaseOptionsCreate) SetNillablePrompt(s *string) *PhaseOptionsCreate {
	if s != nil {
		poc.SetPrompt(*s)
	}
	return poc
}

// SetUserOptionsID sets the "user_options" edge to the UserOptions entity by ID.
func (poc *PhaseOptionsCreate) SetUserOptionsID(id int) *PhaseOptionsCreate {
	poc.mutation.SetUserOptionsID(id)
	return poc
}

// SetNillableUserOptionsID sets the "user_options" edge to the UserOptions entity by ID if the given value is not nil.
func (poc *PhaseOptionsCreate) SetNillableUserOptionsID(id *int) *PhaseOptionsCreate {
	if id != nil {
		poc = poc.SetUserOptionsID(*id)
	}
	return poc
}

// SetUserOptions sets the "user_options" edge to the UserOptions entity.
func (poc *PhaseOptionsCreate) SetUserOptions(u *UserOptions) *PhaseOptionsCreate {
	return poc.SetUserOptionsID(u.ID)
}

// Mutation returns the PhaseOptionsMutation object of the builder.
func (poc *PhaseOptionsCreate) Mutation() *PhaseOptionsMutation {
	return poc.mutation
}

// Save creates the PhaseOptions in the database.
func (poc *PhaseOptionsCreate) Save(ctx context.Context) (*PhaseOptions, error) {
	return withHooks(ctx, poc.sqlSave, poc.mutation, poc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PhaseOptionsCreate) SaveX(ctx context.Context) *PhaseOptions {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PhaseOptionsCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PhaseOptionsCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poc *PhaseOptionsCreate) check() error {
	if _, ok := poc.mutation.PhaseName(); !ok {
		return &ValidationError{Name: "phase_name", err: errors.New(`ent: missing required field "PhaseOptions.phase_name"`)}
	}
	if v, ok := poc.mutation.PhaseName(); ok {
		if err := phaseoptions.PhaseNameValidator(v); err != nil {
			return &ValidationError{Name: "phase_name", err: fmt.Errorf(`ent: validator failed for field "PhaseOptions.phase_name": %w`, err)}
		}
	}
	return nil
}

func (poc *PhaseOptionsCreate) sqlSave(ctx context.Context) (*PhaseOptions, error) {
	if err := poc.check(); err != nil {
		return nil, err
	}
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	poc.mutation.id = &_node.ID
	poc.mutation.done = true
	return _node, nil
}

func (poc *PhaseOptionsCreate) createSpec() (*PhaseOptions, *sqlgraph.CreateSpec) {
	var (
		_node = &PhaseOptions{config: poc.config}
		_spec = sqlgraph.NewCreateSpec(phaseoptions.Table, sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt))
	)
	if value, ok := poc.mutation.PhaseName(); ok {
		_spec.SetField(phaseoptions.FieldPhaseName, field.TypeString, value)
		_node.PhaseName = value
	}
	if value, ok := poc.mutation.GetClient(); ok {
		_spec.SetField(phaseoptions.FieldClient, field.TypeString, value)
		_node.Client = value
	}
	if value, ok := poc.mutation.Model(); ok {
		_spec.SetField(phaseoptions.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := poc.mutation.Prompt(); ok {
		_spec.SetField(phaseoptions.FieldPrompt, field.TypeString, value)
		_node.Prompt = value
	}
	if nodes := poc.mutation.UserOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phaseoptions.UserOptionsTable,
			Columns: []string{phaseoptions.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_options_phase_options = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PhaseOptionsCreateBulk is the builder for creating many PhaseOptions entities in bulk.
type PhaseOptionsCreateBulk struct {
	config
	err      error
	builders []*PhaseOptionsCreate
}

// Save creates the PhaseOptions entities in the database.
func (pocb *PhaseOptionsCreateBulk) Save(ctx context.Context) ([]*PhaseOptions, error) {
	if pocb.err != nil {
		return nil, pocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PhaseOptions, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhaseOptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PhaseOptionsCreateBulk) SaveX(ctx context.Context) []*PhaseOptions {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PhaseOptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PhaseOptionsCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}
