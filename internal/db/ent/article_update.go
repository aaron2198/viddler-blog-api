// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/article"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/predicate"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// ArticleUpdate is the builder for updating Article entities.
type ArticleUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleMutation
}

// Where appends a list predicates to the ArticleUpdate builder.
func (au *ArticleUpdate) Where(ps ...predicate.Article) *ArticleUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetVideoURL sets the "video_url" field.
func (au *ArticleUpdate) SetVideoURL(s string) *ArticleUpdate {
	au.mutation.SetVideoURL(s)
	return au
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableVideoURL(s *string) *ArticleUpdate {
	if s != nil {
		au.SetVideoURL(*s)
	}
	return au
}

// SetVideoID sets the "video_id" field.
func (au *ArticleUpdate) SetVideoID(s string) *ArticleUpdate {
	au.mutation.SetVideoID(s)
	return au
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableVideoID(s *string) *ArticleUpdate {
	if s != nil {
		au.SetVideoID(*s)
	}
	return au
}

// SetUploader sets the "uploader" field.
func (au *ArticleUpdate) SetUploader(s string) *ArticleUpdate {
	au.mutation.SetUploader(s)
	return au
}

// SetNillableUploader sets the "uploader" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableUploader(s *string) *ArticleUpdate {
	if s != nil {
		au.SetUploader(*s)
	}
	return au
}

// SetUploaderURL sets the "uploader_url" field.
func (au *ArticleUpdate) SetUploaderURL(s string) *ArticleUpdate {
	au.mutation.SetUploaderURL(s)
	return au
}

// SetNillableUploaderURL sets the "uploader_url" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableUploaderURL(s *string) *ArticleUpdate {
	if s != nil {
		au.SetUploaderURL(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *ArticleUpdate) SetDescription(s string) *ArticleUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableDescription(s *string) *ArticleUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// SetTitle sets the "title" field.
func (au *ArticleUpdate) SetTitle(s string) *ArticleUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableTitle(s *string) *ArticleUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetThumbnail sets the "thumbnail" field.
func (au *ArticleUpdate) SetThumbnail(s string) *ArticleUpdate {
	au.mutation.SetThumbnail(s)
	return au
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableThumbnail(s *string) *ArticleUpdate {
	if s != nil {
		au.SetThumbnail(*s)
	}
	return au
}

// SetHTML sets the "html" field.
func (au *ArticleUpdate) SetHTML(s string) *ArticleUpdate {
	au.mutation.SetHTML(s)
	return au
}

// SetNillableHTML sets the "html" field if the given value is not nil.
func (au *ArticleUpdate) SetNillableHTML(s *string) *ArticleUpdate {
	if s != nil {
		au.SetHTML(*s)
	}
	return au
}

// SetUserOptionsID sets the "user_options" edge to the UserOptions entity by ID.
func (au *ArticleUpdate) SetUserOptionsID(id int) *ArticleUpdate {
	au.mutation.SetUserOptionsID(id)
	return au
}

// SetNillableUserOptionsID sets the "user_options" edge to the UserOptions entity by ID if the given value is not nil.
func (au *ArticleUpdate) SetNillableUserOptionsID(id *int) *ArticleUpdate {
	if id != nil {
		au = au.SetUserOptionsID(*id)
	}
	return au
}

// SetUserOptions sets the "user_options" edge to the UserOptions entity.
func (au *ArticleUpdate) SetUserOptions(u *UserOptions) *ArticleUpdate {
	return au.SetUserOptionsID(u.ID)
}

// Mutation returns the ArticleMutation object of the builder.
func (au *ArticleUpdate) Mutation() *ArticleMutation {
	return au.mutation
}

// ClearUserOptions clears the "user_options" edge to the UserOptions entity.
func (au *ArticleUpdate) ClearUserOptions() *ArticleUpdate {
	au.mutation.ClearUserOptions()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArticleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArticleUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArticleUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArticleUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ArticleUpdate) check() error {
	if v, ok := au.mutation.VideoURL(); ok {
		if err := article.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "Article.video_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.VideoID(); ok {
		if err := article.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Article.video_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.Uploader(); ok {
		if err := article.UploaderValidator(v); err != nil {
			return &ValidationError{Name: "uploader", err: fmt.Errorf(`ent: validator failed for field "Article.uploader": %w`, err)}
		}
	}
	if v, ok := au.mutation.UploaderURL(); ok {
		if err := article.UploaderURLValidator(v); err != nil {
			return &ValidationError{Name: "uploader_url", err: fmt.Errorf(`ent: validator failed for field "Article.uploader_url": %w`, err)}
		}
	}
	if v, ok := au.mutation.Description(); ok {
		if err := article.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Article.description": %w`, err)}
		}
	}
	if v, ok := au.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := au.mutation.Thumbnail(); ok {
		if err := article.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Article.thumbnail": %w`, err)}
		}
	}
	return nil
}

func (au *ArticleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.VideoURL(); ok {
		_spec.SetField(article.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := au.mutation.VideoID(); ok {
		_spec.SetField(article.FieldVideoID, field.TypeString, value)
	}
	if value, ok := au.mutation.Uploader(); ok {
		_spec.SetField(article.FieldUploader, field.TypeString, value)
	}
	if value, ok := au.mutation.UploaderURL(); ok {
		_spec.SetField(article.FieldUploaderURL, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(article.FieldDescription, field.TypeString, value)
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Thumbnail(); ok {
		_spec.SetField(article.FieldThumbnail, field.TypeString, value)
	}
	if value, ok := au.mutation.HTML(); ok {
		_spec.SetField(article.FieldHTML, field.TypeString, value)
	}
	if au.mutation.UserOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   article.UserOptionsTable,
			Columns: []string{article.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   article.UserOptionsTable,
			Columns: []string{article.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ArticleUpdateOne is the builder for updating a single Article entity.
type ArticleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleMutation
}

// SetVideoURL sets the "video_url" field.
func (auo *ArticleUpdateOne) SetVideoURL(s string) *ArticleUpdateOne {
	auo.mutation.SetVideoURL(s)
	return auo
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableVideoURL(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetVideoURL(*s)
	}
	return auo
}

// SetVideoID sets the "video_id" field.
func (auo *ArticleUpdateOne) SetVideoID(s string) *ArticleUpdateOne {
	auo.mutation.SetVideoID(s)
	return auo
}

// SetNillableVideoID sets the "video_id" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableVideoID(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetVideoID(*s)
	}
	return auo
}

// SetUploader sets the "uploader" field.
func (auo *ArticleUpdateOne) SetUploader(s string) *ArticleUpdateOne {
	auo.mutation.SetUploader(s)
	return auo
}

// SetNillableUploader sets the "uploader" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableUploader(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetUploader(*s)
	}
	return auo
}

// SetUploaderURL sets the "uploader_url" field.
func (auo *ArticleUpdateOne) SetUploaderURL(s string) *ArticleUpdateOne {
	auo.mutation.SetUploaderURL(s)
	return auo
}

// SetNillableUploaderURL sets the "uploader_url" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableUploaderURL(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetUploaderURL(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *ArticleUpdateOne) SetDescription(s string) *ArticleUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableDescription(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// SetTitle sets the "title" field.
func (auo *ArticleUpdateOne) SetTitle(s string) *ArticleUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableTitle(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetThumbnail sets the "thumbnail" field.
func (auo *ArticleUpdateOne) SetThumbnail(s string) *ArticleUpdateOne {
	auo.mutation.SetThumbnail(s)
	return auo
}

// SetNillableThumbnail sets the "thumbnail" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableThumbnail(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetThumbnail(*s)
	}
	return auo
}

// SetHTML sets the "html" field.
func (auo *ArticleUpdateOne) SetHTML(s string) *ArticleUpdateOne {
	auo.mutation.SetHTML(s)
	return auo
}

// SetNillableHTML sets the "html" field if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableHTML(s *string) *ArticleUpdateOne {
	if s != nil {
		auo.SetHTML(*s)
	}
	return auo
}

// SetUserOptionsID sets the "user_options" edge to the UserOptions entity by ID.
func (auo *ArticleUpdateOne) SetUserOptionsID(id int) *ArticleUpdateOne {
	auo.mutation.SetUserOptionsID(id)
	return auo
}

// SetNillableUserOptionsID sets the "user_options" edge to the UserOptions entity by ID if the given value is not nil.
func (auo *ArticleUpdateOne) SetNillableUserOptionsID(id *int) *ArticleUpdateOne {
	if id != nil {
		auo = auo.SetUserOptionsID(*id)
	}
	return auo
}

// SetUserOptions sets the "user_options" edge to the UserOptions entity.
func (auo *ArticleUpdateOne) SetUserOptions(u *UserOptions) *ArticleUpdateOne {
	return auo.SetUserOptionsID(u.ID)
}

// Mutation returns the ArticleMutation object of the builder.
func (auo *ArticleUpdateOne) Mutation() *ArticleMutation {
	return auo.mutation
}

// ClearUserOptions clears the "user_options" edge to the UserOptions entity.
func (auo *ArticleUpdateOne) ClearUserOptions() *ArticleUpdateOne {
	auo.mutation.ClearUserOptions()
	return auo
}

// Where appends a list predicates to the ArticleUpdate builder.
func (auo *ArticleUpdateOne) Where(ps ...predicate.Article) *ArticleUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArticleUpdateOne) Select(field string, fields ...string) *ArticleUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Article entity.
func (auo *ArticleUpdateOne) Save(ctx context.Context) (*Article, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArticleUpdateOne) SaveX(ctx context.Context) *Article {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArticleUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArticleUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ArticleUpdateOne) check() error {
	if v, ok := auo.mutation.VideoURL(); ok {
		if err := article.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "Article.video_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.VideoID(); ok {
		if err := article.VideoIDValidator(v); err != nil {
			return &ValidationError{Name: "video_id", err: fmt.Errorf(`ent: validator failed for field "Article.video_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Uploader(); ok {
		if err := article.UploaderValidator(v); err != nil {
			return &ValidationError{Name: "uploader", err: fmt.Errorf(`ent: validator failed for field "Article.uploader": %w`, err)}
		}
	}
	if v, ok := auo.mutation.UploaderURL(); ok {
		if err := article.UploaderURLValidator(v); err != nil {
			return &ValidationError{Name: "uploader_url", err: fmt.Errorf(`ent: validator failed for field "Article.uploader_url": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Description(); ok {
		if err := article.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Article.description": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Title(); ok {
		if err := article.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Article.title": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Thumbnail(); ok {
		if err := article.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "thumbnail", err: fmt.Errorf(`ent: validator failed for field "Article.thumbnail": %w`, err)}
		}
	}
	return nil
}

func (auo *ArticleUpdateOne) sqlSave(ctx context.Context) (_node *Article, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(article.Table, article.Columns, sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Article.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, article.FieldID)
		for _, f := range fields {
			if !article.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != article.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.VideoURL(); ok {
		_spec.SetField(article.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.VideoID(); ok {
		_spec.SetField(article.FieldVideoID, field.TypeString, value)
	}
	if value, ok := auo.mutation.Uploader(); ok {
		_spec.SetField(article.FieldUploader, field.TypeString, value)
	}
	if value, ok := auo.mutation.UploaderURL(); ok {
		_spec.SetField(article.FieldUploaderURL, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(article.FieldDescription, field.TypeString, value)
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(article.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Thumbnail(); ok {
		_spec.SetField(article.FieldThumbnail, field.TypeString, value)
	}
	if value, ok := auo.mutation.HTML(); ok {
		_spec.SetField(article.FieldHTML, field.TypeString, value)
	}
	if auo.mutation.UserOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   article.UserOptionsTable,
			Columns: []string{article.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   article.UserOptionsTable,
			Columns: []string{article.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Article{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{article.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
