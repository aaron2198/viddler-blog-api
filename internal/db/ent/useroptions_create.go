// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/article"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/phaseoptions"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// UserOptionsCreate is the builder for creating a UserOptions entity.
type UserOptionsCreate struct {
	config
	mutation *UserOptionsMutation
	hooks    []Hook
}

// SetVideoURL sets the "video_url" field.
func (uoc *UserOptionsCreate) SetVideoURL(s string) *UserOptionsCreate {
	uoc.mutation.SetVideoURL(s)
	return uoc
}

// SetUserStylePrompt sets the "user_style_prompt" field.
func (uoc *UserOptionsCreate) SetUserStylePrompt(s string) *UserOptionsCreate {
	uoc.mutation.SetUserStylePrompt(s)
	return uoc
}

// SetNillableUserStylePrompt sets the "user_style_prompt" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableUserStylePrompt(s *string) *UserOptionsCreate {
	if s != nil {
		uoc.SetUserStylePrompt(*s)
	}
	return uoc
}

// SetClient sets the "client" field.
func (uoc *UserOptionsCreate) SetClient(s string) *UserOptionsCreate {
	uoc.mutation.SetClient(s)
	return uoc
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableClient(s *string) *UserOptionsCreate {
	if s != nil {
		uoc.SetClient(*s)
	}
	return uoc
}

// SetModel sets the "model" field.
func (uoc *UserOptionsCreate) SetModel(s string) *UserOptionsCreate {
	uoc.mutation.SetModel(s)
	return uoc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableModel(s *string) *UserOptionsCreate {
	if s != nil {
		uoc.SetModel(*s)
	}
	return uoc
}

// SetMode sets the "mode" field.
func (uoc *UserOptionsCreate) SetMode(s string) *UserOptionsCreate {
	uoc.mutation.SetMode(s)
	return uoc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableMode(s *string) *UserOptionsCreate {
	if s != nil {
		uoc.SetMode(*s)
	}
	return uoc
}

// SetChaptersAsSections sets the "chapters_as_sections" field.
func (uoc *UserOptionsCreate) SetChaptersAsSections(b bool) *UserOptionsCreate {
	uoc.mutation.SetChaptersAsSections(b)
	return uoc
}

// SetNillableChaptersAsSections sets the "chapters_as_sections" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableChaptersAsSections(b *bool) *UserOptionsCreate {
	if b != nil {
		uoc.SetChaptersAsSections(*b)
	}
	return uoc
}

// SetEmbedVideo sets the "embed_video" field.
func (uoc *UserOptionsCreate) SetEmbedVideo(b bool) *UserOptionsCreate {
	uoc.mutation.SetEmbedVideo(b)
	return uoc
}

// SetNillableEmbedVideo sets the "embed_video" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableEmbedVideo(b *bool) *UserOptionsCreate {
	if b != nil {
		uoc.SetEmbedVideo(*b)
	}
	return uoc
}

// SetIncludeDescription sets the "include_description" field.
func (uoc *UserOptionsCreate) SetIncludeDescription(b bool) *UserOptionsCreate {
	uoc.mutation.SetIncludeDescription(b)
	return uoc
}

// SetNillableIncludeDescription sets the "include_description" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableIncludeDescription(b *bool) *UserOptionsCreate {
	if b != nil {
		uoc.SetIncludeDescription(*b)
	}
	return uoc
}

// SetIncludeTags sets the "include_tags" field.
func (uoc *UserOptionsCreate) SetIncludeTags(b bool) *UserOptionsCreate {
	uoc.mutation.SetIncludeTags(b)
	return uoc
}

// SetNillableIncludeTags sets the "include_tags" field if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableIncludeTags(b *bool) *UserOptionsCreate {
	if b != nil {
		uoc.SetIncludeTags(*b)
	}
	return uoc
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (uoc *UserOptionsCreate) SetArticleID(id int) *UserOptionsCreate {
	uoc.mutation.SetArticleID(id)
	return uoc
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (uoc *UserOptionsCreate) SetNillableArticleID(id *int) *UserOptionsCreate {
	if id != nil {
		uoc = uoc.SetArticleID(*id)
	}
	return uoc
}

// SetArticle sets the "article" edge to the Article entity.
func (uoc *UserOptionsCreate) SetArticle(a *Article) *UserOptionsCreate {
	return uoc.SetArticleID(a.ID)
}

// AddPhaseOptionIDs adds the "phase_options" edge to the PhaseOptions entity by IDs.
func (uoc *UserOptionsCreate) AddPhaseOptionIDs(ids ...int) *UserOptionsCreate {
	uoc.mutation.AddPhaseOptionIDs(ids...)
	return uoc
}

// AddPhaseOptions adds the "phase_options" edges to the PhaseOptions entity.
func (uoc *UserOptionsCreate) AddPhaseOptions(p ...*PhaseOptions) *UserOptionsCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uoc.AddPhaseOptionIDs(ids...)
}

// Mutation returns the UserOptionsMutation object of the builder.
func (uoc *UserOptionsCreate) Mutation() *UserOptionsMutation {
	return uoc.mutation
}

// Save creates the UserOptions in the database.
func (uoc *UserOptionsCreate) Save(ctx context.Context) (*UserOptions, error) {
	uoc.defaults()
	return withHooks(ctx, uoc.sqlSave, uoc.mutation, uoc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uoc *UserOptionsCreate) SaveX(ctx context.Context) *UserOptions {
	v, err := uoc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uoc *UserOptionsCreate) Exec(ctx context.Context) error {
	_, err := uoc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uoc *UserOptionsCreate) ExecX(ctx context.Context) {
	if err := uoc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uoc *UserOptionsCreate) defaults() {
	if _, ok := uoc.mutation.ChaptersAsSections(); !ok {
		v := useroptions.DefaultChaptersAsSections
		uoc.mutation.SetChaptersAsSections(v)
	}
	if _, ok := uoc.mutation.EmbedVideo(); !ok {
		v := useroptions.DefaultEmbedVideo
		uoc.mutation.SetEmbedVideo(v)
	}
	if _, ok := uoc.mutation.IncludeDescription(); !ok {
		v := useroptions.DefaultIncludeDescription
		uoc.mutation.SetIncludeDescription(v)
	}
	if _, ok := uoc.mutation.IncludeTags(); !ok {
		v := useroptions.DefaultIncludeTags
		uoc.mutation.SetIncludeTags(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uoc *UserOptionsCreate) check() error {
	if _, ok := uoc.mutation.VideoURL(); !ok {
		return &ValidationError{Name: "video_url", err: errors.New(`ent: missing required field "UserOptions.video_url"`)}
	}
	if v, ok := uoc.mutation.VideoURL(); ok {
		if err := useroptions.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "UserOptions.video_url": %w`, err)}
		}
	}
	if _, ok := uoc.mutation.ChaptersAsSections(); !ok {
		return &ValidationError{Name: "chapters_as_sections", err: errors.New(`ent: missing required field "UserOptions.chapters_as_sections"`)}
	}
	if _, ok := uoc.mutation.EmbedVideo(); !ok {
		return &ValidationError{Name: "embed_video", err: errors.New(`ent: missing required field "UserOptions.embed_video"`)}
	}
	if _, ok := uoc.mutation.IncludeDescription(); !ok {
		return &ValidationError{Name: "include_description", err: errors.New(`ent: missing required field "UserOptions.include_description"`)}
	}
	if _, ok := uoc.mutation.IncludeTags(); !ok {
		return &ValidationError{Name: "include_tags", err: errors.New(`ent: missing required field "UserOptions.include_tags"`)}
	}
	return nil
}

func (uoc *UserOptionsCreate) sqlSave(ctx context.Context) (*UserOptions, error) {
	if err := uoc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uoc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uoc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uoc.mutation.id = &_node.ID
	uoc.mutation.done = true
	return _node, nil
}

func (uoc *UserOptionsCreate) createSpec() (*UserOptions, *sqlgraph.CreateSpec) {
	var (
		_node = &UserOptions{config: uoc.config}
		_spec = sqlgraph.NewCreateSpec(useroptions.Table, sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt))
	)
	if value, ok := uoc.mutation.VideoURL(); ok {
		_spec.SetField(useroptions.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = value
	}
	if value, ok := uoc.mutation.UserStylePrompt(); ok {
		_spec.SetField(useroptions.FieldUserStylePrompt, field.TypeString, value)
		_node.UserStylePrompt = value
	}
	if value, ok := uoc.mutation.GetClient(); ok {
		_spec.SetField(useroptions.FieldClient, field.TypeString, value)
		_node.Client = value
	}
	if value, ok := uoc.mutation.Model(); ok {
		_spec.SetField(useroptions.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := uoc.mutation.Mode(); ok {
		_spec.SetField(useroptions.FieldMode, field.TypeString, value)
		_node.Mode = value
	}
	if value, ok := uoc.mutation.ChaptersAsSections(); ok {
		_spec.SetField(useroptions.FieldChaptersAsSections, field.TypeBool, value)
		_node.ChaptersAsSections = value
	}
	if value, ok := uoc.mutation.EmbedVideo(); ok {
		_spec.SetField(useroptions.FieldEmbedVideo, field.TypeBool, value)
		_node.EmbedVideo = value
	}
	if value, ok := uoc.mutation.IncludeDescription(); ok {
		_spec.SetField(useroptions.FieldIncludeDescription, field.TypeBool, value)
		_node.IncludeDescription = value
	}
	if value, ok := uoc.mutation.IncludeTags(); ok {
		_spec.SetField(useroptions.FieldIncludeTags, field.TypeBool, value)
		_node.IncludeTags = value
	}
	if nodes := uoc.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useroptions.ArticleTable,
			Columns: []string{useroptions.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uoc.mutation.PhaseOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useroptions.PhaseOptionsTable,
			Columns: []string{useroptions.PhaseOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserOptionsCreateBulk is the builder for creating many UserOptions entities in bulk.
type UserOptionsCreateBulk struct {
	config
	err      error
	builders []*UserOptionsCreate
}

// Save creates the UserOptions entities in the database.
func (uocb *UserOptionsCreateBulk) Save(ctx context.Context) ([]*UserOptions, error) {
	if uocb.err != nil {
		return nil, uocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uocb.builders))
	nodes := make([]*UserOptions, len(uocb.builders))
	mutators := make([]Mutator, len(uocb.builders))
	for i := range uocb.builders {
		func(i int, root context.Context) {
			builder := uocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserOptionsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uocb *UserOptionsCreateBulk) SaveX(ctx context.Context) []*UserOptions {
	v, err := uocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uocb *UserOptionsCreateBulk) Exec(ctx context.Context) error {
	_, err := uocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uocb *UserOptionsCreateBulk) ExecX(ctx context.Context) {
	if err := uocb.Exec(ctx); err != nil {
		panic(err)
	}
}
