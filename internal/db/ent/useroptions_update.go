// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/article"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/phaseoptions"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/predicate"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// UserOptionsUpdate is the builder for updating UserOptions entities.
type UserOptionsUpdate struct {
	config
	hooks    []Hook
	mutation *UserOptionsMutation
}

// Where appends a list predicates to the UserOptionsUpdate builder.
func (uou *UserOptionsUpdate) Where(ps ...predicate.UserOptions) *UserOptionsUpdate {
	uou.mutation.Where(ps...)
	return uou
}

// SetVideoURL sets the "video_url" field.
func (uou *UserOptionsUpdate) SetVideoURL(s string) *UserOptionsUpdate {
	uou.mutation.SetVideoURL(s)
	return uou
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableVideoURL(s *string) *UserOptionsUpdate {
	if s != nil {
		uou.SetVideoURL(*s)
	}
	return uou
}

// SetUserStylePrompt sets the "user_style_prompt" field.
func (uou *UserOptionsUpdate) SetUserStylePrompt(s string) *UserOptionsUpdate {
	uou.mutation.SetUserStylePrompt(s)
	return uou
}

// SetNillableUserStylePrompt sets the "user_style_prompt" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableUserStylePrompt(s *string) *UserOptionsUpdate {
	if s != nil {
		uou.SetUserStylePrompt(*s)
	}
	return uou
}

// ClearUserStylePrompt clears the value of the "user_style_prompt" field.
func (uou *UserOptionsUpdate) ClearUserStylePrompt() *UserOptionsUpdate {
	uou.mutation.ClearUserStylePrompt()
	return uou
}

// SetClient sets the "client" field.
func (uou *UserOptionsUpdate) SetClient(s string) *UserOptionsUpdate {
	uou.mutation.SetClient(s)
	return uou
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableClient(s *string) *UserOptionsUpdate {
	if s != nil {
		uou.SetClient(*s)
	}
	return uou
}

// ClearClient clears the value of the "client" field.
func (uou *UserOptionsUpdate) ClearClient() *UserOptionsUpdate {
	uou.mutation.ClearClient()
	return uou
}

// SetModel sets the "model" field.
func (uou *UserOptionsUpdate) SetModel(s string) *UserOptionsUpdate {
	uou.mutation.SetModel(s)
	return uou
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableModel(s *string) *UserOptionsUpdate {
	if s != nil {
		uou.SetModel(*s)
	}
	return uou
}

// ClearModel clears the value of the "model" field.
func (uou *UserOptionsUpdate) ClearModel() *UserOptionsUpdate {
	uou.mutation.ClearModel()
	return uou
}

// SetMode sets the "mode" field.
func (uou *UserOptionsUpdate) SetMode(s string) *UserOptionsUpdate {
	uou.mutation.SetMode(s)
	return uou
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableMode(s *string) *UserOptionsUpdate {
	if s != nil {
		uou.SetMode(*s)
	}
	return uou
}

// ClearMode clears the value of the "mode" field.
func (uou *UserOptionsUpdate) ClearMode() *UserOptionsUpdate {
	uou.mutation.ClearMode()
	return uou
}

// SetChaptersAsSections sets the "chapters_as_sections" field.
func (uou *UserOptionsUpdate) SetChaptersAsSections(b bool) *UserOptionsUpdate {
	uou.mutation.SetChaptersAsSections(b)
	return uou
}

// SetNillableChaptersAsSections sets the "chapters_as_sections" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableChaptersAsSections(b *bool) *UserOptionsUpdate {
	if b != nil {
		uou.SetChaptersAsSections(*b)
	}
	return uou
}

// SetEmbedVideo sets the "embed_video" field.
func (uou *UserOptionsUpdate) SetEmbedVideo(b bool) *UserOptionsUpdate {
	uou.mutation.SetEmbedVideo(b)
	return uou
}

// SetNillableEmbedVideo sets the "embed_video" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableEmbedVideo(b *bool) *UserOptionsUpdate {
	if b != nil {
		uou.SetEmbedVideo(*b)
	}
	return uou
}

// SetIncludeDescription sets the "include_description" field.
func (uou *UserOptionsUpdate) SetIncludeDescription(b bool) *UserOptionsUpdate {
	uou.mutation.SetIncludeDescription(b)
	return uou
}

// SetNillableIncludeDescription sets the "include_description" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableIncludeDescription(b *bool) *UserOptionsUpdate {
	if b != nil {
		uou.SetIncludeDescription(*b)
	}
	return uou
}

// SetIncludeTags sets the "include_tags" field.
func (uou *UserOptionsUpdate) SetIncludeTags(b bool) *UserOptionsUpdate {
	uou.mutation.SetIncludeTags(b)
	return uou
}

// SetNillableIncludeTags sets the "include_tags" field if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableIncludeTags(b *bool) *UserOptionsUpdate {
	if b != nil {
		uou.SetIncludeTags(*b)
	}
	return uou
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (uou *UserOptionsUpdate) SetArticleID(id int) *UserOptionsUpdate {
	uou.mutation.SetArticleID(id)
	return uou
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (uou *UserOptionsUpdate) SetNillableArticleID(id *int) *UserOptionsUpdate {
	if id != nil {
		uou = uou.SetArticleID(*id)
	}
	return uou
}

// SetArticle sets the "article" edge to the Article entity.
func (uou *UserOptionsUpdate) SetArticle(a *Article) *UserOptionsUpdate {
	return uou.SetArticleID(a.ID)
}

// AddPhaseOptionIDs adds the "phase_options" edge to the PhaseOptions entity by IDs.
func (uou *UserOptionsUpdate) AddPhaseOptionIDs(ids ...int) *UserOptionsUpdate {
	uou.mutation.AddPhaseOptionIDs(ids...)
	return uou
}

// AddPhaseOptions adds the "phase_options" edges to the PhaseOptions entity.
func (uou *UserOptionsUpdate) AddPhaseOptions(p ...*PhaseOptions) *UserOptionsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uou.AddPhaseOptionIDs(ids...)
}

// Mutation returns the UserOptionsMutation object of the builder.
func (uou *UserOptionsUpdate) Mutation() *UserOptionsMutation {
	return uou.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (uou *UserOptionsUpdate) ClearArticle() *UserOptionsUpdate {
	uou.mutation.ClearArticle()
	return uou
}

// ClearPhaseOptions clears all "phase_options" edges to the PhaseOptions entity.
func (uou *UserOptionsUpdate) ClearPhaseOptions() *UserOptionsUpdate {
	uou.mutation.ClearPhaseOptions()
	return uou
}

// RemovePhaseOptionIDs removes the "phase_options" edge to PhaseOptions entities by IDs.
func (uou *UserOptionsUpdate) RemovePhaseOptionIDs(ids ...int) *UserOptionsUpdate {
	uou.mutation.RemovePhaseOptionIDs(ids...)
	return uou
}

// RemovePhaseOptions removes "phase_options" edges to PhaseOptions entities.
func (uou *UserOptionsUpdate) RemovePhaseOptions(p ...*PhaseOptions) *UserOptionsUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uou.RemovePhaseOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uou *UserOptionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uou.sqlSave, uou.mutation, uou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uou *UserOptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := uou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uou *UserOptionsUpdate) Exec(ctx context.Context) error {
	_, err := uou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uou *UserOptionsUpdate) ExecX(ctx context.Context) {
	if err := uou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uou *UserOptionsUpdate) check() error {
	if v, ok := uou.mutation.VideoURL(); ok {
		if err := useroptions.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "UserOptions.video_url": %w`, err)}
		}
	}
	return nil
}

func (uou *UserOptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(useroptions.Table, useroptions.Columns, sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt))
	if ps := uou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uou.mutation.VideoURL(); ok {
		_spec.SetField(useroptions.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := uou.mutation.UserStylePrompt(); ok {
		_spec.SetField(useroptions.FieldUserStylePrompt, field.TypeString, value)
	}
	if uou.mutation.UserStylePromptCleared() {
		_spec.ClearField(useroptions.FieldUserStylePrompt, field.TypeString)
	}
	if value, ok := uou.mutation.GetClient(); ok {
		_spec.SetField(useroptions.FieldClient, field.TypeString, value)
	}
	if uou.mutation.ClientCleared() {
		_spec.ClearField(useroptions.FieldClient, field.TypeString)
	}
	if value, ok := uou.mutation.Model(); ok {
		_spec.SetField(useroptions.FieldModel, field.TypeString, value)
	}
	if uou.mutation.ModelCleared() {
		_spec.ClearField(useroptions.FieldModel, field.TypeString)
	}
	if value, ok := uou.mutation.Mode(); ok {
		_spec.SetField(useroptions.FieldMode, field.TypeString, value)
	}
	if uou.mutation.ModeCleared() {
		_spec.ClearField(useroptions.FieldMode, field.TypeString)
	}
	if value, ok := uou.mutation.ChaptersAsSections(); ok {
		_spec.SetField(useroptions.FieldChaptersAsSections, field.TypeBool, value)
	}
	if value, ok := uou.mutation.EmbedVideo(); ok {
		_spec.SetField(useroptions.FieldEmbedVideo, field.TypeBool, value)
	}
	if value, ok := uou.mutation.IncludeDescription(); ok {
		_spec.SetField(useroptions.FieldIncludeDescription, field.TypeBool, value)
	}
	if value, ok := uou.mutation.IncludeTags(); ok {
		_spec.SetField(useroptions.FieldIncludeTags, field.TypeBool, value)
	}
	if uou.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useroptions.ArticleTable,
			Columns: []string{useroptions.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useroptions.ArticleTable,
			Columns: []string{useroptions.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uou.mutation.PhaseOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useroptions.PhaseOptionsTable,
			Columns: []string{useroptions.PhaseOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.RemovedPhaseOptionsIDs(); len(nodes) > 0 && !uou.mutation.PhaseOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useroptions.PhaseOptionsTable,
			Columns: []string{useroptions.PhaseOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uou.mutation.PhaseOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useroptions.PhaseOptionsTable,
			Columns: []string{useroptions.PhaseOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useroptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uou.mutation.done = true
	return n, nil
}

// UserOptionsUpdateOne is the builder for updating a single UserOptions entity.
type UserOptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserOptionsMutation
}

// SetVideoURL sets the "video_url" field.
func (uouo *UserOptionsUpdateOne) SetVideoURL(s string) *UserOptionsUpdateOne {
	uouo.mutation.SetVideoURL(s)
	return uouo
}

// SetNillableVideoURL sets the "video_url" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableVideoURL(s *string) *UserOptionsUpdateOne {
	if s != nil {
		uouo.SetVideoURL(*s)
	}
	return uouo
}

// SetUserStylePrompt sets the "user_style_prompt" field.
func (uouo *UserOptionsUpdateOne) SetUserStylePrompt(s string) *UserOptionsUpdateOne {
	uouo.mutation.SetUserStylePrompt(s)
	return uouo
}

// SetNillableUserStylePrompt sets the "user_style_prompt" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableUserStylePrompt(s *string) *UserOptionsUpdateOne {
	if s != nil {
		uouo.SetUserStylePrompt(*s)
	}
	return uouo
}

// ClearUserStylePrompt clears the value of the "user_style_prompt" field.
func (uouo *UserOptionsUpdateOne) ClearUserStylePrompt() *UserOptionsUpdateOne {
	uouo.mutation.ClearUserStylePrompt()
	return uouo
}

// SetClient sets the "client" field.
func (uouo *UserOptionsUpdateOne) SetClient(s string) *UserOptionsUpdateOne {
	uouo.mutation.SetClient(s)
	return uouo
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableClient(s *string) *UserOptionsUpdateOne {
	if s != nil {
		uouo.SetClient(*s)
	}
	return uouo
}

// ClearClient clears the value of the "client" field.
func (uouo *UserOptionsUpdateOne) ClearClient() *UserOptionsUpdateOne {
	uouo.mutation.ClearClient()
	return uouo
}

// SetModel sets the "model" field.
func (uouo *UserOptionsUpdateOne) SetModel(s string) *UserOptionsUpdateOne {
	uouo.mutation.SetModel(s)
	return uouo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableModel(s *string) *UserOptionsUpdateOne {
	if s != nil {
		uouo.SetModel(*s)
	}
	return uouo
}

// ClearModel clears the value of the "model" field.
func (uouo *UserOptionsUpdateOne) ClearModel() *UserOptionsUpdateOne {
	uouo.mutation.ClearModel()
	return uouo
}

// SetMode sets the "mode" field.
func (uouo *UserOptionsUpdateOne) SetMode(s string) *UserOptionsUpdateOne {
	uouo.mutation.SetMode(s)
	return uouo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableMode(s *string) *UserOptionsUpdateOne {
	if s != nil {
		uouo.SetMode(*s)
	}
	return uouo
}

// ClearMode clears the value of the "mode" field.
func (uouo *UserOptionsUpdateOne) ClearMode() *UserOptionsUpdateOne {
	uouo.mutation.ClearMode()
	return uouo
}

// SetChaptersAsSections sets the "chapters_as_sections" field.
func (uouo *UserOptionsUpdateOne) SetChaptersAsSections(b bool) *UserOptionsUpdateOne {
	uouo.mutation.SetChaptersAsSections(b)
	return uouo
}

// SetNillableChaptersAsSections sets the "chapters_as_sections" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableChaptersAsSections(b *bool) *UserOptionsUpdateOne {
	if b != nil {
		uouo.SetChaptersAsSections(*b)
	}
	return uouo
}

// SetEmbedVideo sets the "embed_video" field.
func (uouo *UserOptionsUpdateOne) SetEmbedVideo(b bool) *UserOptionsUpdateOne {
	uouo.mutation.SetEmbedVideo(b)
	return uouo
}

// SetNillableEmbedVideo sets the "embed_video" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableEmbedVideo(b *bool) *UserOptionsUpdateOne {
	if b != nil {
		uouo.SetEmbedVideo(*b)
	}
	return uouo
}

// SetIncludeDescription sets the "include_description" field.
func (uouo *UserOptionsUpdateOne) SetIncludeDescription(b bool) *UserOptionsUpdateOne {
	uouo.mutation.SetIncludeDescription(b)
	return uouo
}

// SetNillableIncludeDescription sets the "include_description" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableIncludeDescription(b *bool) *UserOptionsUpdateOne {
	if b != nil {
		uouo.SetIncludeDescription(*b)
	}
	return uouo
}

// SetIncludeTags sets the "include_tags" field.
func (uouo *UserOptionsUpdateOne) SetIncludeTags(b bool) *UserOptionsUpdateOne {
	uouo.mutation.SetIncludeTags(b)
	return uouo
}

// SetNillableIncludeTags sets the "include_tags" field if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableIncludeTags(b *bool) *UserOptionsUpdateOne {
	if b != nil {
		uouo.SetIncludeTags(*b)
	}
	return uouo
}

// SetArticleID sets the "article" edge to the Article entity by ID.
func (uouo *UserOptionsUpdateOne) SetArticleID(id int) *UserOptionsUpdateOne {
	uouo.mutation.SetArticleID(id)
	return uouo
}

// SetNillableArticleID sets the "article" edge to the Article entity by ID if the given value is not nil.
func (uouo *UserOptionsUpdateOne) SetNillableArticleID(id *int) *UserOptionsUpdateOne {
	if id != nil {
		uouo = uouo.SetArticleID(*id)
	}
	return uouo
}

// SetArticle sets the "article" edge to the Article entity.
func (uouo *UserOptionsUpdateOne) SetArticle(a *Article) *UserOptionsUpdateOne {
	return uouo.SetArticleID(a.ID)
}

// AddPhaseOptionIDs adds the "phase_options" edge to the PhaseOptions entity by IDs.
func (uouo *UserOptionsUpdateOne) AddPhaseOptionIDs(ids ...int) *UserOptionsUpdateOne {
	uouo.mutation.AddPhaseOptionIDs(ids...)
	return uouo
}

// AddPhaseOptions adds the "phase_options" edges to the PhaseOptions entity.
func (uouo *UserOptionsUpdateOne) AddPhaseOptions(p ...*PhaseOptions) *UserOptionsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uouo.AddPhaseOptionIDs(ids...)
}

// Mutation returns the UserOptionsMutation object of the builder.
func (uouo *UserOptionsUpdateOne) Mutation() *UserOptionsMutation {
	return uouo.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (uouo *UserOptionsUpdateOne) ClearArticle() *UserOptionsUpdateOne {
	uouo.mutation.ClearArticle()
	return uouo
}

// ClearPhaseOptions clears all "phase_options" edges to the PhaseOptions entity.
func (uouo *UserOptionsUpdateOne) ClearPhaseOptions() *UserOptionsUpdateOne {
	uouo.mutation.ClearPhaseOptions()
	return uouo
}

// RemovePhaseOptionIDs removes the "phase_options" edge to PhaseOptions entities by IDs.
func (uouo *UserOptionsUpdateOne) RemovePhaseOptionIDs(ids ...int) *UserOptionsUpdateOne {
	uouo.mutation.RemovePhaseOptionIDs(ids...)
	return uouo
}

// RemovePhaseOptions removes "phase_options" edges to PhaseOptions entities.
func (uouo *UserOptionsUpdateOne) RemovePhaseOptions(p ...*PhaseOptions) *UserOptionsUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uouo.RemovePhaseOptionIDs(ids...)
}

// Where appends a list predicates to the UserOptionsUpdate builder.
func (uouo *UserOptionsUpdateOne) Where(ps ...predicate.UserOptions) *UserOptionsUpdateOne {
	uouo.mutation.Where(ps...)
	return uouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uouo *UserOptionsUpdateOne) Select(field string, fields ...string) *UserOptionsUpdateOne {
	uouo.fields = append([]string{field}, fields...)
	return uouo
}

// Save executes the query and returns the updated UserOptions entity.
func (uouo *UserOptionsUpdateOne) Save(ctx context.Context) (*UserOptions, error) {
	return withHooks(ctx, uouo.sqlSave, uouo.mutation, uouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uouo *UserOptionsUpdateOne) SaveX(ctx context.Context) *UserOptions {
	node, err := uouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uouo *UserOptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := uouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uouo *UserOptionsUpdateOne) ExecX(ctx context.Context) {
	if err := uouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uouo *UserOptionsUpdateOne) check() error {
	if v, ok := uouo.mutation.VideoURL(); ok {
		if err := useroptions.VideoURLValidator(v); err != nil {
			return &ValidationError{Name: "video_url", err: fmt.Errorf(`ent: validator failed for field "UserOptions.video_url": %w`, err)}
		}
	}
	return nil
}

func (uouo *UserOptionsUpdateOne) sqlSave(ctx context.Context) (_node *UserOptions, err error) {
	if err := uouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(useroptions.Table, useroptions.Columns, sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt))
	id, ok := uouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserOptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, useroptions.FieldID)
		for _, f := range fields {
			if !useroptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != useroptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uouo.mutation.VideoURL(); ok {
		_spec.SetField(useroptions.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := uouo.mutation.UserStylePrompt(); ok {
		_spec.SetField(useroptions.FieldUserStylePrompt, field.TypeString, value)
	}
	if uouo.mutation.UserStylePromptCleared() {
		_spec.ClearField(useroptions.FieldUserStylePrompt, field.TypeString)
	}
	if value, ok := uouo.mutation.GetClient(); ok {
		_spec.SetField(useroptions.FieldClient, field.TypeString, value)
	}
	if uouo.mutation.ClientCleared() {
		_spec.ClearField(useroptions.FieldClient, field.TypeString)
	}
	if value, ok := uouo.mutation.Model(); ok {
		_spec.SetField(useroptions.FieldModel, field.TypeString, value)
	}
	if uouo.mutation.ModelCleared() {
		_spec.ClearField(useroptions.FieldModel, field.TypeString)
	}
	if value, ok := uouo.mutation.Mode(); ok {
		_spec.SetField(useroptions.FieldMode, field.TypeString, value)
	}
	if uouo.mutation.ModeCleared() {
		_spec.ClearField(useroptions.FieldMode, field.TypeString)
	}
	if value, ok := uouo.mutation.ChaptersAsSections(); ok {
		_spec.SetField(useroptions.FieldChaptersAsSections, field.TypeBool, value)
	}
	if value, ok := uouo.mutation.EmbedVideo(); ok {
		_spec.SetField(useroptions.FieldEmbedVideo, field.TypeBool, value)
	}
	if value, ok := uouo.mutation.IncludeDescription(); ok {
		_spec.SetField(useroptions.FieldIncludeDescription, field.TypeBool, value)
	}
	if value, ok := uouo.mutation.IncludeTags(); ok {
		_spec.SetField(useroptions.FieldIncludeTags, field.TypeBool, value)
	}
	if uouo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useroptions.ArticleTable,
			Columns: []string{useroptions.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   useroptions.ArticleTable,
			Columns: []string{useroptions.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uouo.mutation.PhaseOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useroptions.PhaseOptionsTable,
			Columns: []string{useroptions.PhaseOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.RemovedPhaseOptionsIDs(); len(nodes) > 0 && !uouo.mutation.PhaseOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useroptions.PhaseOptionsTable,
			Columns: []string{useroptions.PhaseOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uouo.mutation.PhaseOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useroptions.PhaseOptionsTable,
			Columns: []string{useroptions.PhaseOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserOptions{config: uouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{useroptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uouo.mutation.done = true
	return _node, nil
}
