// Code generated by ent, DO NOT EDIT.

package article

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the article type in the database.
	Label = "article"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldUploader holds the string denoting the uploader field in the database.
	FieldUploader = "uploader"
	// FieldUploaderURL holds the string denoting the uploader_url field in the database.
	FieldUploaderURL = "uploader_url"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldThumbnail holds the string denoting the thumbnail field in the database.
	FieldThumbnail = "thumbnail"
	// FieldHTML holds the string denoting the html field in the database.
	FieldHTML = "html"
	// EdgeUserOptions holds the string denoting the user_options edge name in mutations.
	EdgeUserOptions = "user_options"
	// Table holds the table name of the article in the database.
	Table = "articles"
	// UserOptionsTable is the table that holds the user_options relation/edge.
	UserOptionsTable = "articles"
	// UserOptionsInverseTable is the table name for the UserOptions entity.
	// It exists in this package in order to avoid circular dependency with the "useroptions" package.
	UserOptionsInverseTable = "user_options"
	// UserOptionsColumn is the table column denoting the user_options relation/edge.
	UserOptionsColumn = "user_options_article"
)

// Columns holds all SQL columns for article fields.
var Columns = []string{
	FieldID,
	FieldVideoURL,
	FieldVideoID,
	FieldUploader,
	FieldUploaderURL,
	FieldDescription,
	FieldTitle,
	FieldThumbnail,
	FieldHTML,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "articles"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_options_article",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// VideoURLValidator is a validator for the "video_url" field. It is called by the builders before save.
	VideoURLValidator func(string) error
	// VideoIDValidator is a validator for the "video_id" field. It is called by the builders before save.
	VideoIDValidator func(string) error
	// UploaderValidator is a validator for the "uploader" field. It is called by the builders before save.
	UploaderValidator func(string) error
	// UploaderURLValidator is a validator for the "uploader_url" field. It is called by the builders before save.
	UploaderURLValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ThumbnailValidator is a validator for the "thumbnail" field. It is called by the builders before save.
	ThumbnailValidator func(string) error
)

// OrderOption defines the ordering options for the Article queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByVideoID orders the results by the video_id field.
func ByVideoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoID, opts...).ToFunc()
}

// ByUploader orders the results by the uploader field.
func ByUploader(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploader, opts...).ToFunc()
}

// ByUploaderURL orders the results by the uploader_url field.
func ByUploaderURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUploaderURL, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByThumbnail orders the results by the thumbnail field.
func ByThumbnail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThumbnail, opts...).ToFunc()
}

// ByHTML orders the results by the html field.
func ByHTML(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHTML, opts...).ToFunc()
}

// ByUserOptionsField orders the results by user_options field.
func ByUserOptionsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserOptionsStep(), sql.OrderByField(field, opts...))
	}
}
func newUserOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UserOptionsTable, UserOptionsColumn),
	)
}
