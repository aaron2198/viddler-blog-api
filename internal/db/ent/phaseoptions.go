// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/phaseoptions"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// PhaseOptions is the model entity for the PhaseOptions schema.
type PhaseOptions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PhaseName holds the value of the "phase_name" field.
	PhaseName string `json:"phase_name,omitempty"`
	// Client holds the value of the "client" field.
	Client string `json:"client,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// Prompt holds the value of the "prompt" field.
	Prompt string `json:"prompt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhaseOptionsQuery when eager-loading is set.
	Edges                      PhaseOptionsEdges `json:"edges"`
	user_options_phase_options *int
	selectValues               sql.SelectValues
}

// PhaseOptionsEdges holds the relations/edges for other nodes in the graph.
type PhaseOptionsEdges struct {
	// UserOptions holds the value of the user_options edge.
	UserOptions *UserOptions `json:"user_options,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOptionsOrErr returns the UserOptions value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PhaseOptionsEdges) UserOptionsOrErr() (*UserOptions, error) {
	if e.UserOptions != nil {
		return e.UserOptions, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: useroptions.Label}
	}
	return nil, &NotLoadedError{edge: "user_options"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PhaseOptions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case phaseoptions.FieldID:
			values[i] = new(sql.NullInt64)
		case phaseoptions.FieldPhaseName, phaseoptions.FieldClient, phaseoptions.FieldModel, phaseoptions.FieldPrompt:
			values[i] = new(sql.NullString)
		case phaseoptions.ForeignKeys[0]: // user_options_phase_options
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PhaseOptions fields.
func (po *PhaseOptions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case phaseoptions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case phaseoptions.FieldPhaseName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phase_name", values[i])
			} else if value.Valid {
				po.PhaseName = value.String
			}
		case phaseoptions.FieldClient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client", values[i])
			} else if value.Valid {
				po.Client = value.String
			}
		case phaseoptions.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				po.Model = value.String
			}
		case phaseoptions.FieldPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt", values[i])
			} else if value.Valid {
				po.Prompt = value.String
			}
		case phaseoptions.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_options_phase_options", value)
			} else if value.Valid {
				po.user_options_phase_options = new(int)
				*po.user_options_phase_options = int(value.Int64)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PhaseOptions.
// This includes values selected through modifiers, order, etc.
func (po *PhaseOptions) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryUserOptions queries the "user_options" edge of the PhaseOptions entity.
func (po *PhaseOptions) QueryUserOptions() *UserOptionsQuery {
	return NewPhaseOptionsClient(po.config).QueryUserOptions(po)
}

// Update returns a builder for updating this PhaseOptions.
// Note that you need to call PhaseOptions.Unwrap() before calling this method if this PhaseOptions
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *PhaseOptions) Update() *PhaseOptionsUpdateOne {
	return NewPhaseOptionsClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the PhaseOptions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *PhaseOptions) Unwrap() *PhaseOptions {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: PhaseOptions is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *PhaseOptions) String() string {
	var builder strings.Builder
	builder.WriteString("PhaseOptions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("phase_name=")
	builder.WriteString(po.PhaseName)
	builder.WriteString(", ")
	builder.WriteString("client=")
	builder.WriteString(po.Client)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(po.Model)
	builder.WriteString(", ")
	builder.WriteString("prompt=")
	builder.WriteString(po.Prompt)
	builder.WriteByte(')')
	return builder.String()
}

// PhaseOptionsSlice is a parsable slice of PhaseOptions.
type PhaseOptionsSlice []*PhaseOptions
