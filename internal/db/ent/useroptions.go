// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/article"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// UserOptions is the model entity for the UserOptions schema.
type UserOptions struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url,omitempty"`
	// UserStylePrompt holds the value of the "user_style_prompt" field.
	UserStylePrompt string `json:"user_style_prompt,omitempty"`
	// Client holds the value of the "client" field.
	Client string `json:"client,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// Mode holds the value of the "mode" field.
	Mode string `json:"mode,omitempty"`
	// ChaptersAsSections holds the value of the "chapters_as_sections" field.
	ChaptersAsSections bool `json:"chapters_as_sections,omitempty"`
	// EmbedVideo holds the value of the "embed_video" field.
	EmbedVideo bool `json:"embed_video,omitempty"`
	// IncludeDescription holds the value of the "include_description" field.
	IncludeDescription bool `json:"include_description,omitempty"`
	// IncludeTags holds the value of the "include_tags" field.
	IncludeTags bool `json:"include_tags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserOptionsQuery when eager-loading is set.
	Edges        UserOptionsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserOptionsEdges holds the relations/edges for other nodes in the graph.
type UserOptionsEdges struct {
	// Article holds the value of the article edge.
	Article *Article `json:"article,omitempty"`
	// PhaseOptions holds the value of the phase_options edge.
	PhaseOptions []*PhaseOptions `json:"phase_options,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ArticleOrErr returns the Article value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserOptionsEdges) ArticleOrErr() (*Article, error) {
	if e.Article != nil {
		return e.Article, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: article.Label}
	}
	return nil, &NotLoadedError{edge: "article"}
}

// PhaseOptionsOrErr returns the PhaseOptions value or an error if the edge
// was not loaded in eager-loading.
func (e UserOptionsEdges) PhaseOptionsOrErr() ([]*PhaseOptions, error) {
	if e.loadedTypes[1] {
		return e.PhaseOptions, nil
	}
	return nil, &NotLoadedError{edge: "phase_options"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserOptions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case useroptions.FieldChaptersAsSections, useroptions.FieldEmbedVideo, useroptions.FieldIncludeDescription, useroptions.FieldIncludeTags:
			values[i] = new(sql.NullBool)
		case useroptions.FieldID:
			values[i] = new(sql.NullInt64)
		case useroptions.FieldVideoURL, useroptions.FieldUserStylePrompt, useroptions.FieldClient, useroptions.FieldModel, useroptions.FieldMode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserOptions fields.
func (uo *UserOptions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case useroptions.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			uo.ID = int(value.Int64)
		case useroptions.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				uo.VideoURL = value.String
			}
		case useroptions.FieldUserStylePrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_style_prompt", values[i])
			} else if value.Valid {
				uo.UserStylePrompt = value.String
			}
		case useroptions.FieldClient:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client", values[i])
			} else if value.Valid {
				uo.Client = value.String
			}
		case useroptions.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				uo.Model = value.String
			}
		case useroptions.FieldMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mode", values[i])
			} else if value.Valid {
				uo.Mode = value.String
			}
		case useroptions.FieldChaptersAsSections:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field chapters_as_sections", values[i])
			} else if value.Valid {
				uo.ChaptersAsSections = value.Bool
			}
		case useroptions.FieldEmbedVideo:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field embed_video", values[i])
			} else if value.Valid {
				uo.EmbedVideo = value.Bool
			}
		case useroptions.FieldIncludeDescription:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field include_description", values[i])
			} else if value.Valid {
				uo.IncludeDescription = value.Bool
			}
		case useroptions.FieldIncludeTags:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field include_tags", values[i])
			} else if value.Valid {
				uo.IncludeTags = value.Bool
			}
		default:
			uo.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserOptions.
// This includes values selected through modifiers, order, etc.
func (uo *UserOptions) Value(name string) (ent.Value, error) {
	return uo.selectValues.Get(name)
}

// QueryArticle queries the "article" edge of the UserOptions entity.
func (uo *UserOptions) QueryArticle() *ArticleQuery {
	return NewUserOptionsClient(uo.config).QueryArticle(uo)
}

// QueryPhaseOptions queries the "phase_options" edge of the UserOptions entity.
func (uo *UserOptions) QueryPhaseOptions() *PhaseOptionsQuery {
	return NewUserOptionsClient(uo.config).QueryPhaseOptions(uo)
}

// Update returns a builder for updating this UserOptions.
// Note that you need to call UserOptions.Unwrap() before calling this method if this UserOptions
// was returned from a transaction, and the transaction was committed or rolled back.
func (uo *UserOptions) Update() *UserOptionsUpdateOne {
	return NewUserOptionsClient(uo.config).UpdateOne(uo)
}

// Unwrap unwraps the UserOptions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uo *UserOptions) Unwrap() *UserOptions {
	_tx, ok := uo.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserOptions is not a transactional entity")
	}
	uo.config.driver = _tx.drv
	return uo
}

// String implements the fmt.Stringer.
func (uo *UserOptions) String() string {
	var builder strings.Builder
	builder.WriteString("UserOptions(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uo.ID))
	builder.WriteString("video_url=")
	builder.WriteString(uo.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("user_style_prompt=")
	builder.WriteString(uo.UserStylePrompt)
	builder.WriteString(", ")
	builder.WriteString("client=")
	builder.WriteString(uo.Client)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(uo.Model)
	builder.WriteString(", ")
	builder.WriteString("mode=")
	builder.WriteString(uo.Mode)
	builder.WriteString(", ")
	builder.WriteString("chapters_as_sections=")
	builder.WriteString(fmt.Sprintf("%v", uo.ChaptersAsSections))
	builder.WriteString(", ")
	builder.WriteString("embed_video=")
	builder.WriteString(fmt.Sprintf("%v", uo.EmbedVideo))
	builder.WriteString(", ")
	builder.WriteString("include_description=")
	builder.WriteString(fmt.Sprintf("%v", uo.IncludeDescription))
	builder.WriteString(", ")
	builder.WriteString("include_tags=")
	builder.WriteString(fmt.Sprintf("%v", uo.IncludeTags))
	builder.WriteByte(')')
	return builder.String()
}

// UserOptionsSlice is a parsable slice of UserOptions.
type UserOptionsSlice []*UserOptions
