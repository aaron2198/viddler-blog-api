// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/phaseoptions"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/predicate"
	"gitlab.aaronhess.xyz/viddler/viddler-blog-api/internal/db/ent/useroptions"
)

// PhaseOptionsUpdate is the builder for updating PhaseOptions entities.
type PhaseOptionsUpdate struct {
	config
	hooks    []Hook
	mutation *PhaseOptionsMutation
}

// Where appends a list predicates to the PhaseOptionsUpdate builder.
func (pou *PhaseOptionsUpdate) Where(ps ...predicate.PhaseOptions) *PhaseOptionsUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetPhaseName sets the "phase_name" field.
func (pou *PhaseOptionsUpdate) SetPhaseName(s string) *PhaseOptionsUpdate {
	pou.mutation.SetPhaseName(s)
	return pou
}

// SetNillablePhaseName sets the "phase_name" field if the given value is not nil.
func (pou *PhaseOptionsUpdate) SetNillablePhaseName(s *string) *PhaseOptionsUpdate {
	if s != nil {
		pou.SetPhaseName(*s)
	}
	return pou
}

// SetClient sets the "client" field.
func (pou *PhaseOptionsUpdate) SetClient(s string) *PhaseOptionsUpdate {
	pou.mutation.SetClient(s)
	return pou
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (pou *PhaseOptionsUpdate) SetNillableClient(s *string) *PhaseOptionsUpdate {
	if s != nil {
		pou.SetClient(*s)
	}
	return pou
}

// ClearClient clears the value of the "client" field.
func (pou *PhaseOptionsUpdate) ClearClient() *PhaseOptionsUpdate {
	pou.mutation.ClearClient()
	return pou
}

// SetModel sets the "model" field.
func (pou *PhaseOptionsUpdate) SetModel(s string) *PhaseOptionsUpdate {
	pou.mutation.SetModel(s)
	return pou
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pou *PhaseOptionsUpdate) SetNillableModel(s *string) *PhaseOptionsUpdate {
	if s != nil {
		pou.SetModel(*s)
	}
	return pou
}

// ClearModel clears the value of the "model" field.
func (pou *PhaseOptionsUpdate) ClearModel() *PhaseOptionsUpdate {
	pou.mutation.ClearModel()
	return pou
}

// SetPrompt sets the "prompt" field.
func (pou *PhaseOptionsUpdate) SetPrompt(s string) *PhaseOptionsUpdate {
	pou.mutation.SetPrompt(s)
	return pou
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (pou *PhaseOptionsUpdate) SetNillablePrompt(s *string) *PhaseOptionsUpdate {
	if s != nil {
		pou.SetPrompt(*s)
	}
	return pou
}

// ClearPrompt clears the value of the "prompt" field.
func (pou *PhaseOptionsUpdate) ClearPrompt() *PhaseOptionsUpdate {
	pou.mutation.ClearPrompt()
	return pou
}

// SetUserOptionsID sets the "user_options" edge to the UserOptions entity by ID.
func (pou *PhaseOptionsUpdate) SetUserOptionsID(id int) *PhaseOptionsUpdate {
	pou.mutation.SetUserOptionsID(id)
	return pou
}

// SetNillableUserOptionsID sets the "user_options" edge to the UserOptions entity by ID if the given value is not nil.
func (pou *PhaseOptionsUpdate) SetNillableUserOptionsID(id *int) *PhaseOptionsUpdate {
	if id != nil {
		pou = pou.SetUserOptionsID(*id)
	}
	return pou
}

// SetUserOptions sets the "user_options" edge to the UserOptions entity.
func (pou *PhaseOptionsUpdate) SetUserOptions(u *UserOptions) *PhaseOptionsUpdate {
	return pou.SetUserOptionsID(u.ID)
}

// Mutation returns the PhaseOptionsMutation object of the builder.
func (pou *PhaseOptionsUpdate) Mutation() *PhaseOptionsMutation {
	return pou.mutation
}

// ClearUserOptions clears the "user_options" edge to the UserOptions entity.
func (pou *PhaseOptionsUpdate) ClearUserOptions() *PhaseOptionsUpdate {
	pou.mutation.ClearUserOptions()
	return pou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PhaseOptionsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pou.sqlSave, pou.mutation, pou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PhaseOptionsUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PhaseOptionsUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PhaseOptionsUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pou *PhaseOptionsUpdate) check() error {
	if v, ok := pou.mutation.PhaseName(); ok {
		if err := phaseoptions.PhaseNameValidator(v); err != nil {
			return &ValidationError{Name: "phase_name", err: fmt.Errorf(`ent: validator failed for field "PhaseOptions.phase_name": %w`, err)}
		}
	}
	return nil
}

func (pou *PhaseOptionsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(phaseoptions.Table, phaseoptions.Columns, sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt))
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.PhaseName(); ok {
		_spec.SetField(phaseoptions.FieldPhaseName, field.TypeString, value)
	}
	if value, ok := pou.mutation.GetClient(); ok {
		_spec.SetField(phaseoptions.FieldClient, field.TypeString, value)
	}
	if pou.mutation.ClientCleared() {
		_spec.ClearField(phaseoptions.FieldClient, field.TypeString)
	}
	if value, ok := pou.mutation.Model(); ok {
		_spec.SetField(phaseoptions.FieldModel, field.TypeString, value)
	}
	if pou.mutation.ModelCleared() {
		_spec.ClearField(phaseoptions.FieldModel, field.TypeString)
	}
	if value, ok := pou.mutation.Prompt(); ok {
		_spec.SetField(phaseoptions.FieldPrompt, field.TypeString, value)
	}
	if pou.mutation.PromptCleared() {
		_spec.ClearField(phaseoptions.FieldPrompt, field.TypeString)
	}
	if pou.mutation.UserOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phaseoptions.UserOptionsTable,
			Columns: []string{phaseoptions.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pou.mutation.UserOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phaseoptions.UserOptionsTable,
			Columns: []string{phaseoptions.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phaseoptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pou.mutation.done = true
	return n, nil
}

// PhaseOptionsUpdateOne is the builder for updating a single PhaseOptions entity.
type PhaseOptionsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhaseOptionsMutation
}

// SetPhaseName sets the "phase_name" field.
func (pouo *PhaseOptionsUpdateOne) SetPhaseName(s string) *PhaseOptionsUpdateOne {
	pouo.mutation.SetPhaseName(s)
	return pouo
}

// SetNillablePhaseName sets the "phase_name" field if the given value is not nil.
func (pouo *PhaseOptionsUpdateOne) SetNillablePhaseName(s *string) *PhaseOptionsUpdateOne {
	if s != nil {
		pouo.SetPhaseName(*s)
	}
	return pouo
}

// SetClient sets the "client" field.
func (pouo *PhaseOptionsUpdateOne) SetClient(s string) *PhaseOptionsUpdateOne {
	pouo.mutation.SetClient(s)
	return pouo
}

// SetNillableClient sets the "client" field if the given value is not nil.
func (pouo *PhaseOptionsUpdateOne) SetNillableClient(s *string) *PhaseOptionsUpdateOne {
	if s != nil {
		pouo.SetClient(*s)
	}
	return pouo
}

// ClearClient clears the value of the "client" field.
func (pouo *PhaseOptionsUpdateOne) ClearClient() *PhaseOptionsUpdateOne {
	pouo.mutation.ClearClient()
	return pouo
}

// SetModel sets the "model" field.
func (pouo *PhaseOptionsUpdateOne) SetModel(s string) *PhaseOptionsUpdateOne {
	pouo.mutation.SetModel(s)
	return pouo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pouo *PhaseOptionsUpdateOne) SetNillableModel(s *string) *PhaseOptionsUpdateOne {
	if s != nil {
		pouo.SetModel(*s)
	}
	return pouo
}

// ClearModel clears the value of the "model" field.
func (pouo *PhaseOptionsUpdateOne) ClearModel() *PhaseOptionsUpdateOne {
	pouo.mutation.ClearModel()
	return pouo
}

// SetPrompt sets the "prompt" field.
func (pouo *PhaseOptionsUpdateOne) SetPrompt(s string) *PhaseOptionsUpdateOne {
	pouo.mutation.SetPrompt(s)
	return pouo
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (pouo *PhaseOptionsUpdateOne) SetNillablePrompt(s *string) *PhaseOptionsUpdateOne {
	if s != nil {
		pouo.SetPrompt(*s)
	}
	return pouo
}

// ClearPrompt clears the value of the "prompt" field.
func (pouo *PhaseOptionsUpdateOne) ClearPrompt() *PhaseOptionsUpdateOne {
	pouo.mutation.ClearPrompt()
	return pouo
}

// SetUserOptionsID sets the "user_options" edge to the UserOptions entity by ID.
func (pouo *PhaseOptionsUpdateOne) SetUserOptionsID(id int) *PhaseOptionsUpdateOne {
	pouo.mutation.SetUserOptionsID(id)
	return pouo
}

// SetNillableUserOptionsID sets the "user_options" edge to the UserOptions entity by ID if the given value is not nil.
func (pouo *PhaseOptionsUpdateOne) SetNillableUserOptionsID(id *int) *PhaseOptionsUpdateOne {
	if id != nil {
		pouo = pouo.SetUserOptionsID(*id)
	}
	return pouo
}

// SetUserOptions sets the "user_options" edge to the UserOptions entity.
func (pouo *PhaseOptionsUpdateOne) SetUserOptions(u *UserOptions) *PhaseOptionsUpdateOne {
	return pouo.SetUserOptionsID(u.ID)
}

// Mutation returns the PhaseOptionsMutation object of the builder.
func (pouo *PhaseOptionsUpdateOne) Mutation() *PhaseOptionsMutation {
	return pouo.mutation
}

// ClearUserOptions clears the "user_options" edge to the UserOptions entity.
func (pouo *PhaseOptionsUpdateOne) ClearUserOptions() *PhaseOptionsUpdateOne {
	pouo.mutation.ClearUserOptions()
	return pouo
}

// Where appends a list predicates to the PhaseOptionsUpdate builder.
func (pouo *PhaseOptionsUpdateOne) Where(ps ...predicate.PhaseOptions) *PhaseOptionsUpdateOne {
	pouo.mutation.Where(ps...)
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PhaseOptionsUpdateOne) Select(field string, fields ...string) *PhaseOptionsUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PhaseOptions entity.
func (pouo *PhaseOptionsUpdateOne) Save(ctx context.Context) (*PhaseOptions, error) {
	return withHooks(ctx, pouo.sqlSave, pouo.mutation, pouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PhaseOptionsUpdateOne) SaveX(ctx context.Context) *PhaseOptions {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PhaseOptionsUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PhaseOptionsUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pouo *PhaseOptionsUpdateOne) check() error {
	if v, ok := pouo.mutation.PhaseName(); ok {
		if err := phaseoptions.PhaseNameValidator(v); err != nil {
			return &ValidationError{Name: "phase_name", err: fmt.Errorf(`ent: validator failed for field "PhaseOptions.phase_name": %w`, err)}
		}
	}
	return nil
}

func (pouo *PhaseOptionsUpdateOne) sqlSave(ctx context.Context) (_node *PhaseOptions, err error) {
	if err := pouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(phaseoptions.Table, phaseoptions.Columns, sqlgraph.NewFieldSpec(phaseoptions.FieldID, field.TypeInt))
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PhaseOptions.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, phaseoptions.FieldID)
		for _, f := range fields {
			if !phaseoptions.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != phaseoptions.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.PhaseName(); ok {
		_spec.SetField(phaseoptions.FieldPhaseName, field.TypeString, value)
	}
	if value, ok := pouo.mutation.GetClient(); ok {
		_spec.SetField(phaseoptions.FieldClient, field.TypeString, value)
	}
	if pouo.mutation.ClientCleared() {
		_spec.ClearField(phaseoptions.FieldClient, field.TypeString)
	}
	if value, ok := pouo.mutation.Model(); ok {
		_spec.SetField(phaseoptions.FieldModel, field.TypeString, value)
	}
	if pouo.mutation.ModelCleared() {
		_spec.ClearField(phaseoptions.FieldModel, field.TypeString)
	}
	if value, ok := pouo.mutation.Prompt(); ok {
		_spec.SetField(phaseoptions.FieldPrompt, field.TypeString, value)
	}
	if pouo.mutation.PromptCleared() {
		_spec.ClearField(phaseoptions.FieldPrompt, field.TypeString)
	}
	if pouo.mutation.UserOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phaseoptions.UserOptionsTable,
			Columns: []string{phaseoptions.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pouo.mutation.UserOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   phaseoptions.UserOptionsTable,
			Columns: []string{phaseoptions.UserOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(useroptions.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PhaseOptions{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{phaseoptions.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pouo.mutation.done = true
	return _node, nil
}
